<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zdzhong</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-16T02:33:02.786Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zdzhong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM之类加载器的分类</title>
    <link href="http://yoursite.com/2020/03/02/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB/"/>
    <id>http://yoursite.com/2020/03/02/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB/</id>
    <published>2020-03-02T02:25:26.000Z</published>
    <updated>2020-03-16T02:33:02.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类加载器的分类"><a href="#类加载器的分类" class="headerlink" title="类加载器的分类"></a>类加载器的分类</h2><p>​        JVM支持两种类型的类加载器，分别为<code>引导类加载器</code>（Bootstrap ClassLoader）和<code>自定义类加载器</code>（User-Defined ClassLoader）。从概念上来讲，自定义加载器一般指的是程序中有开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是<font color="red">将所有派生于抽象类ClassLoader的类加载器都划分为自定义加载器。</font></p><p>​        无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个，如下所示：</p><p><img src="/2020/03/02/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB/1.png" alt="1584270565304"></p><p>​        <font color="red"><strong>这里的四者之间的关系是包含关系。不是上层下层，也不是子父类的继承关系</strong></font>，可以通过一段代码进行展示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取系统类加载器：AppClassLoader</span></span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line">        <span class="comment">// sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取系统类加载器的上层：ExtClassLoader</span></span><br><span class="line">        ClassLoader extensionClassLoader = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(extensionClassLoader);</span><br><span class="line">        <span class="comment">// sun.misc.Launcher$ExtClassLoader@378bf509</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取扩展类加载器的上层：引导类加载器，获取不到</span></span><br><span class="line">        ClassLoader bootstrapClassLoader = extensionClassLoader.getParent();</span><br><span class="line">        System.out.println(bootstrapClassLoader);<span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于用户自定义来说：默认使用系统类加载器</span></span><br><span class="line">        ClassLoader classLoader = ClassLoaderTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line">        <span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// String类使用的是引导了加载器。</span></span><br><span class="line">        <span class="comment">// 由此可推断Java的核心类库都是使用引导类加载器。</span></span><br><span class="line">        ClassLoader stringClassLoader = String<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(stringClassLoader);<span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        Bootstrap Class Loader使用的是非Java语言编写的，使用的是C/C++语言编写的，而其他的Class Loader都是使用Java语言编写的。Bootstrap Class Loader并不是JVM层面的，它不遵守ClassLoader的加载规则，Bootstrap classLoader并没有子类。 </p><h3 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h3><p>​        <code>启动类加载</code>又称之为<code>引导类加载器</code>（<strong>Bootstrap Class Loader</strong>）主要有以下特点：</p><ul><li><p>这个类加载使用<font color="red">C/C++语言实现的</font>，嵌套在JVM内部。</p></li><li><p>它用来加载Java的核心库（JAVA_HOME/jre/lib/rt/jar、resources.jar或sun.boot.class.path路径下的内容），用于提供JVM自身需要的类。</p></li><li><p>并不继承自java.lang.ClassLoader，没有父加载器。</p></li><li><p>加载扩展类和应用程序类加载器，并指定为他们的父类加载器。</p></li><li><p>出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类。</p><p>​    值得一提的是Unsafe类中有一个静态的构造方法getUnsafe()</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title">getUnsafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Class cc = Reflection.getCallerClass();</span><br><span class="line">    <span class="keyword">if</span> (!VM.isSystemDomainLoader(cc.getClassLoader())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"Unsafe"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> theUnsafe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSystemDomainLoader</span><span class="params">(ClassLoader cc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cc == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        第三行代码中，获取调用这个方法的类是通过什么类加载器进行加载，如果不是Bootstrap Class Loader加载的会抛一个SecurityException。可以清晰的知道isSystemDomainLoader()这个方法只是简单的判断cc == null，由此可知，Bootstrap Class Loader不是在JVM层面，因为此时这个cc为null。所以在自定义中获取Unsafe实例时，不能通过getUnsafe()静态方法进行获取实例。</p><h3 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h3><p>​        扩展类加载器（Extension Class Loader）主要特点如下：</p><ul><li>Java语言编写，由sun.misc.Launcher$ExtClassLoader实现。</li><li>派生于ClassLoader类，ExtClassLoader继承自URLClassLoader，URLClassLoader继承自SecureClassLoader，而SecureClassLoader继承自ClassLoader，所以间接继承自ClassLoader。</li><li>父类加载器为启动类加载器</li><li>从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre/lib/ext子目录（扩展目录）下加载类库。<font color="red">如果用户创建的JAR放在此目录下，也会自动有扩展类加载器加载。</font></li></ul><h3 id="应用程序类加载器"><a href="#应用程序类加载器" class="headerlink" title="应用程序类加载器"></a>应用程序类加载器</h3><p>​        应用程序类加载又称之为系统类加载器（Appcation Class Loader），主要特点如下：</p><ul><li>Java语言编写，由sun.misc.Launcher$AppClassLoader实现。</li><li>派生于ClassLoader类，AppClassLoader继承自URLClassLoader，URLClassLoader继承自SecureClassLoader，而SecureClassLoader继承自ClassLoader，所以间接继承自ClassLoader。</li><li>父类加载器为扩展类加载器。</li><li>他负责加载环境变量classpath或者系统属性java.class.path指定路径下的类库。</li><li>该类加载器是程序中默认的加载器，一般来说，Java应用的类都是由它来完成加载。</li><li>通过CLassLoader#getSystemClassLoader()方法可以获取到该类加载器。</li></ul><h3 id="用户自定义类加载器"><a href="#用户自定义类加载器" class="headerlink" title="用户自定义类加载器"></a>用户自定义类加载器</h3><p>​        在Java的日常应用程序开发中，类的加载几乎是由上述3种类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定制类的加载方式。</p><p>​        <strong>为什么要自定义类加载器?</strong></p><ul><li><p>隔离加载类</p></li><li><p>修改类加载的方式</p></li><li><p>扩展加载源</p></li><li><p>防止源码泄漏</p><p><strong>用户自定义类加载器实现步骤:</strong> </p></li><li><p>开发人员可以通过继承抽象类java. lang . ClassLoader类的方式，实现自己的类加载器，以满足一些特殊的需求。</p></li><li><p>在JDK1.2之前，在自定义类加载器时，总会去继承ClassLoader类并重写loadClass ()方法，从而实现自定义的类加载类，但是在JDK1.2之后已不再建议用户去覆盖loadClass()方法，而是建议把自定义的类加载逻辑写在findClass()方法中。</p></li><li><p>在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URLClassLoader类，这样就可以避免自己去编写findClass()方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;类加载器的分类&quot;&gt;&lt;a href=&quot;#类加载器的分类&quot; class=&quot;headerlink&quot; title=&quot;类加载器的分类&quot;&gt;&lt;/a&gt;类加载器的分类&lt;/h2&gt;&lt;p&gt;​        JVM支持两种类型的类加载器，分别为&lt;code&gt;引导类加载器&lt;/code&gt;（Boo
      
    
    </summary>
    
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM之类的加载过程</title>
    <link href="http://yoursite.com/2020/03/01/JVM%E4%B9%8B%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/03/01/JVM%E4%B9%8B%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</id>
    <published>2020-03-01T02:16:02.000Z</published>
    <updated>2020-03-16T02:24:08.678Z</updated>
    
    <content type="html"><![CDATA[<p>​        一个类是如何从Java文件，加载到JVM中呢？我们都知道Java文件通过编译器编译之后就会生成一个class文件，通过JVM在通过加载class文件将相关信息加载到内存当中，具体是一个什么样的过程呢？</p><h2 id="类加载器子系统"><a href="#类加载器子系统" class="headerlink" title="类加载器子系统"></a>类加载器子系统</h2><p><img src="/2020/03/01/JVM%E4%B9%8B%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/3.png" alt="1584247404831"></p><ul><li>类加载器子系统负责从文件系统或者网络中加载class文件，class文件的开始8个字节为0xCAFEBABE，称之为魔数。只有这种开头的class文件才能被类加载器子系统加载。</li><li>ClassLoader只负责class文件的加载，至于它是否可以正常运行，则有Execution Engine（执行引擎）决定。</li><li>加载的类信息存放于一块称之为`方法区（方法区只是在HotSpot VM才具有的。jdk1.7及以前称之为永久代，1.8及以后称之为元空间）的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分厂里狼信息是class文件中常量池部分的内存映射）。</li></ul><p>​        类的加载过程的几个阶段：<br><img src="/2020/03/01/JVM%E4%B9%8B%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/4.png" alt="1584249545731"></p><h2 id="加载阶段（Loading）"><a href="#加载阶段（Loading）" class="headerlink" title="加载阶段（Loading）"></a>加载阶段（Loading）</h2><ul><li>通过一个类的全限定名获取定义此类的二进制<code>字节流</code>。</li><li>将这个字节流所代表的静态存储结构转化为<code>方法区</code>的运行时数据结构。</li><li>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口。</li></ul><h3 id="类加载器ClassLoader"><a href="#类加载器ClassLoader" class="headerlink" title="类加载器ClassLoader"></a>类加载器ClassLoader</h3><p><img src="/2020/03/01/JVM%E4%B9%8B%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/5.png" alt></p><ul><li><p>class file 存放在本地硬盘中，在类执行的时候将class file加载到JVM中，根据这个文件实例化出n个一摸一样的实例。</p></li><li><p>class file 加载到JVM中，被称之为DNA元数据，放在方法区。</p></li><li><p>在.class file -&gt; JVM -&gt; 最终成为元数据，此过程就要一个运输工具（类加载器 Class Loader），扮演一个运输的角色。</p><p>值得一提的是，自定义类的加载器一般都是Application Class Loader。</p></li></ul><h2 id="链接阶段（Linking）"><a href="#链接阶段（Linking）" class="headerlink" title="链接阶段（Linking）"></a>链接阶段（Linking）</h2><p>​        链接阶段分为3个小的阶段，验证、准备、解析。</p><h3 id="验证（Verify）"><a href="#验证（Verify）" class="headerlink" title="验证（Verify）"></a>验证（Verify）</h3><ul><li>目的在于确保class文件的字节流中包含信息符合当前虚拟机的要求，保证被加载类的正确性，不会危害虚拟机自身安全。</li><li>主要包括四种验证：文件格式验证，元数据验证，字节码验证，符号引用验证。</li></ul><h3 id="准备（prepare）"><a href="#准备（prepare）" class="headerlink" title="准备（prepare）"></a>准备（prepare）</h3><ul><li>为类变量分配内存并且设置该类变量的默认初始值，即零值。</li><li>这里不包含用final修饰static，因为使用final修饰的为常量，final在编译的时候就会分配了，准备阶段会显式初始化；</li><li>这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中。</li></ul><h3 id="解析（Resolve）"><a href="#解析（Resolve）" class="headerlink" title="解析（Resolve）"></a>解析（Resolve）</h3><ul><li>将常量池内的符号引用转换为直接引用的过程。</li><li>事实上，解析操作往往会伴随着JVM在执行完初始化之后在执行。</li><li>符号引用就是一组符号来描述索引中的目标。符号引用的字面量形式明确定义在《java 虚拟机贵方》的Class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或者一个间接定位到目标的句柄。</li><li>解析动作主要针对类或者接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT_Class_info、CONSTANT_Filedref_info、CONSTANT_Methodref_info等。</li></ul><h2 id="初始化阶段（Initialization）"><a href="#初始化阶段（Initialization）" class="headerlink" title="初始化阶段（Initialization）"></a>初始化阶段（Initialization）</h2><ul><li>初始化阶段就是在执行类构造器方法<clinit>()的过程。</clinit></li><li>此方法不需定义，是javac编译器自动收集类中的所有<code>变量</code>的赋值动作和<code>静态代码块</code>中的语句合并而来。</li><li>构造器方法中指令按语句在源文件中出现的顺序执行。</li><li><clinit>()不同于类的构造器（关联：构造器是虚拟机视角下的<init>()）</init></clinit></li><li>若该类具有父类，JVM会保证子类的<clinit>()执行前，父类的<clinit>()已经执行完毕</clinit></clinit></li><li>虚拟机必须保证一个类的<clinit>()方法在多线程下被同步加锁。</clinit></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​        一个类是如何从Java文件，加载到JVM中呢？我们都知道Java文件通过编译器编译之后就会生成一个class文件，通过JVM在通过加载class文件将相关信息加载到内存当中，具体是一个什么样的过程呢？&lt;/p&gt;
&lt;h2 id=&quot;类加载器子系统&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 从入门到放弃(一)</title>
    <link href="http://yoursite.com/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/"/>
    <id>http://yoursite.com/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/</id>
    <published>2020-02-29T07:29:28.000Z</published>
    <updated>2020-03-16T05:01:50.854Z</updated>
    
    <content type="html"><![CDATA[<p>​        Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。 ——来源<a href="https://baike.baidu.com/item/spring%20cloud/20269825?fr=aladdin" target="_blank" rel="noopener">百度百科</a>  </p><a id="more"></a>  <h3 id="Spring-Cloud简介"><a href="#Spring-Cloud简介" class="headerlink" title="Spring Cloud简介"></a>Spring Cloud简介</h3><p>​        为什么使用SpringCloud？从微服务的角度而言：就是把一个大的项目，分解成多个小的模块。这些小的模块组合起来，完成功能。而微服务在这个基础上要更彻底地去耦合。</p><p>​        Spring Cloud主要集成的框架：  </p><ul><li>Spring Cloud Eureka（服务治理）  </li><li>Spring Cloud Ribbon（客户端负载均衡）  </li><li>Spring Cloud Hystrix（服务容错保护）  </li><li>Spring Cloud Feign（声明式服务调用）  </li><li>Spring Cloud Zuul（API网关服务）  </li><li>Spring Cloud Config（分布式配置中心）  </li><li>Spring Cloud Bus（消息总线）  </li><li>Spring Cloud Stream（消息驱动的微服务）  </li><li>Spring Cloud Sleuth（分布式服务跟踪）  </li></ul><h3 id="Spring-Cloud-Eureka-服务治理"><a href="#Spring-Cloud-Eureka-服务治理" class="headerlink" title="Spring Cloud Eureka 服务治理"></a>Spring Cloud Eureka 服务治理</h3><p>​        如果在未使用微服务的系统，在调用其他服务下面的接口时，只有通过ip地址+端口号+接口名的形式去显示调用需要用的接口。这样会导致在ip更换的情况下，需要修改各服务的ip，而现实中ip也存在变更的情况。那么Eureka的作用就体现出来了，不需要去通过这种显示调用其他服务的接口，只需要创建一个新的微服务作为<code>Eureka server</code>，其他服务注册到改<code>Eureka Server</code>服务上，然后其他微服务通过<code>Eureka Server</code>获取服务名就可以调用，而一般服务名不会去修改。  </p><p>​        假设现在又两个微服务分别为：微服务A、微服务B，A需要调用B获取数据，那如何才能通过微服务调用呢？需要创建一个Eureka Server服务器E，将所有的微服务都注册在E上，E服务维护这些已经注册进来的信息，然后E会生成一个注册清单。其他微服务都可以获取这个注册清单。  </p><p>​        所以Eureka分为两个部分，一个是收集所有的注册信息的一端称为<code>Eureka server</code>端，而发送自己的信息给到<code>Eureka server</code>端的或者，获取注册清单的，这两部分称之为<code>Eureka client端</code>。而<code>Eureka client</code>分为两个方面，一个方面叫做<strong>服务提供者</strong>，还有一个叫做<strong>服务消费者</strong>。所谓的服务提供者就是将本身的服务名以及一些元数据发送给<code>Eureka server</code>端，这就叫服务提供者，而从<code>Eureka server</code>端获取注册清单的称为服务消费者。一个微服务可以作为服务提供者也可以作为服务消费者，可以同时担任两种角色，这两种角色并不互斥。  </p><p><img src="/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/Eureka01.png" alt="Eureka01">  </p><p>​        由上图可知，微服务A和微服务B将其自己的相关信息注册到<code>Eureka server</code>服务上面，也可以获取<code>Eureka server</code>上获取注册清单，所以微服务A和微服务B即作为服务提供者，也作为服务消费者，而微服务C和微服务D只从<code>Eureka server</code>上面获取了注册清单，所以微服务C和微服务D只作为服务消费者。  </p><h4 id="Eureka的治理机制"><a href="#Eureka的治理机制" class="headerlink" title="Eureka的治理机制"></a>Eureka的治理机制</h4><p>​        可以通过对角色进行划分Eureka的治理机制：服务提供者、服务消费者、Eureka server（服务注册中心），可以通过角色定位分析Eureka的治理机制。  </p><p><strong>服务提供者</strong>  </p><p>​        <font color="red">服务注册</font> ：在服务启动的时候会通过发送REST请求的方式将自己注册到Eureka Server上，同时带上了自己的IP和端口以及相关信息；  </p><p>​        <font color="red">服务续约</font> ：在注册服务成功之后，服务提供者会维护一个心跳用来持续告诉Eureka Server，默认是30秒一次请求；  </p><p>​        <font color="red">服务下线</font> ：当服务提供者关闭时会向Eureka server发送消息，把自己从服务列表中删除。防止服务消费者调用到不存在的服务。</p><p><strong>服务消费者</strong>  </p><p>​        <font color="red">获取服务注册列表</font> ：当服务消费者启动时，会发送一个REST请求给服务注册中心，来获取上面注册的服务清单；</p><p>​        <font color="red">服务调用</font> ：服务消费者在获取服务清单后，通过服务名可以获得具体提供服务相关接口，完成服务的远程调用；</p><p><strong>Eureka server（服务注册中心）</strong>  </p><p>​        <font color="red">失效剔除</font> ：默认每隔一段时间（默认为60秒） 将当前清单中超时（默认为90秒）没有续约的服务剔除出去；</p><p>​        <font color="red">服务调用</font> ：Eureka server在运行期间，会统计心跳失败的比例在15分钟之内是否低于85%。 Eureka server会将当前的实例注册信息保护起来，让这些实例不会过期，尽可能保护这些注册信息。</p><h4 id="Eureka实战"><a href="#Eureka实战" class="headerlink" title="Eureka实战"></a>Eureka实战</h4><p>​        首先Spring Cloud项目是基于Spring Boot，所以对Spring Boot需要有一定的了解。</p><h5 id="创建Eureka-Server"><a href="#创建Eureka-Server" class="headerlink" title="创建Eureka Server"></a>创建Eureka Server</h5><p>​        先看一下最终的目录结构，父目录为springcloud，里面包含eureka-server和eureka-client这两个module。</p><p><img src="/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/project01.png" alt="1584330634892"></p><p>​        1.新建一个名为springcloud的Maven的项目。</p><p><img src="/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/project02.png" alt></p><p>​        2.点击Next<br><img src="/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/project03.png" alt="1584331097799"></p><p>​        3.点击finish，之后得到的项目结构应该如下图，可以将红色部分删除：</p><p><img src="/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/project04.png" alt></p><p>​        4.然后右击项目名 -&gt; new -&gt; module：<br><img src="/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/project05.png" alt></p><p>​        5.选择Spring Initializr，SDK选择自己JDK的安装目录，点击Next：    <img src="/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/project06.png" alt>        6.填写下列相关信息，由于这也是一个Maven工程，所以Maven的三个GAV也不能少，对应的java包名：</p><p><img src="/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/project07.png" alt></p><p>​        7.接下来选择Spring Cloud Discovery，选择Eureka Server，点击Next，再点击finish：<br><img src="/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/project08.png" alt></p><p>​        8.之后Eureka Server就已经创建好了，工程目录如下，可以将红色部分删除：</p><p><img src="/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/project09.png" alt="1584332168589"></p><p>​        9.之后可以看下我们eureka-server的pom.xml文件中的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- eureka-server 依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- test 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        10. <strong>启动一个服务注册中心</strong>，只需要一个注解@EnableEurekaServer，这个注解需要在springboot工程的启动application类上加：    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        11. eureka是一个高可用的组件，它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳（因此可以在内存中完成），在默认情况下erureka server也是一个eureka client ,必须要指定一个 server。eureka server的配置文件appication.yml，这里<code>application.yml</code>就是resources目录下面<code>application.properties</code>更改扩展名得到的：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registerWithEureka:</span> <span class="literal">false</span> <span class="comment"># false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">false</span>      <span class="comment"># false表示自己端就是注册中心</span></span><br><span class="line">    <span class="comment"># 我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><p>​        12.把服务启动之后可以通过 <a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a> 进行访问Eureka Server端，界面如下：</p><p><img src="/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/project10.png" alt></p><p>​        可以看到Instances这一栏是没有实例的，因为现在只启动了一个Eureka Server，没有Eureka实例注册到这个Server上面，下面就需要新建一个Client将其注册到这上面。</p><h5 id="创建Eureka-Client"><a href="#创建Eureka-Client" class="headerlink" title="创建Eureka Client"></a>创建Eureka Client</h5><p>​        这个和eureka-server的创建差不多就有一个地方不同，需要选择Eureka Discovery Client</p><p><img src="/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/project11.png" alt></p><p>​        Eureka Client的pom.xml文件，需要多加一个web依赖，不然会启动失败：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        application.yml：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8888/eureka/</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8890</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-name</span>    <span class="comment"># 服务名称必须指定</span></span><br></pre></td></tr></table></figure><p>​        启动类需要加一个@EnableEurekaClient注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaClientApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        将eureka-client服务启动之后，<a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a> 页面如下：</p><p><img src="/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/project12.png" alt></p><p>​        对应的实例那一栏有eureka-client注册的服务名称service-name。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。 ——来源&lt;a href=&quot;https://baike.baidu.com/item/spring%20cloud/20269825?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度百科&lt;/a&gt;  &lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="http://yoursite.com/categories/Spring-Cloud/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Redis从入门到放弃(1)</title>
    <link href="http://yoursite.com/2020/02/27/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-1/"/>
    <id>http://yoursite.com/2020/02/27/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-1/</id>
    <published>2020-02-27T03:08:11.000Z</published>
    <updated>2020-02-29T07:30:42.066Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; Redis（全称：Remote Dictionary Server 远程字典服务）是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。——来源<a href="https://baike.baidu.com/item/Redis/6549233?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p><h2 id="1-Redis-简单介绍"><a href="#1-Redis-简单介绍" class="headerlink" title="1.Redis 简单介绍"></a>1.Redis 简单介绍</h2><p>&ensp; Redis是一个开源的，基于内存的数据结构存储，可用作于<strong>数据库、缓存、消息中间件</strong>，以及和token结合实现接口幂等性校验。<br>&ensp; Redis是基于内存，常用作于缓存的一种技术，并且Redis存储的方式是以key-value的形式。这和Java中的Map集合非常相似，但是这两者之间有什么不同呢？  </p><pre><code>Java实现的Map是本地缓存，如果有多台实例(机器)的话，每个实例都需要各自保存一份缓存，缓存不具有一致性。Redis实现的是分布式缓存，如果有多台实例(机器)的话，每个实例都共享一份缓存，缓存具有一致性。Java实现的Map不是专业做缓存的，JVM内存太大容易挂掉的。一般用做于容器来存储临时数据，缓存的数据随着JVM销毁而结束。Map所存储的数据结构，缓存过期机制等等是需要程序员自己手写的。Redis是专业做缓存的，可以用几十个G内存来做缓存。Redis一般用作于缓存，可以将缓存数据保存在硬盘中，Redis重启了后可以将其恢复。原生提供丰富的数据结构、缓存过期机制等等简单好用的功能。</code></pre><h2 id="2-Redis-数据结构"><a href="#2-Redis-数据结构" class="headerlink" title="2.Redis 数据结构"></a>2.Redis 数据结构</h2><p>&ensp; Redis以Key-Value形式存储，那么key对应的数据结构是字符串类型存储，但是value的数据结构就比较多，分别有：string、list、hash、set、sortset。 </p><p>&ensp; Redis由C语言编写，值得注意的是：Redis并没有直接使用C语言的这些数据结构来实现key-value数据库，而是基于这些数据结构创建了一个对象（结构体）系统。简单来说：Redis使用对象来表示数据库中的键和值。每次我们在Redis数据库中新创建一个键值对时，至少会创建出两个对象。一个是键对象，一个是值对象。   </p><p>&ensp; Redis中的key使用的字符串类型跟C语言中的字符串不同，使用的是简单动态字符串（Simple dynamic string,SDS）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp; Redis（全称：Remote Dictionary Server 远程字典服务）是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由V
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>mysql从入门到放弃（二）</title>
    <link href="http://yoursite.com/2020/02/13/mysql%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2020/02/13/mysql%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-02-13T09:37:57.000Z</published>
    <updated>2020-03-13T10:43:14.988Z</updated>
    
    <content type="html"><![CDATA[<p>​         说到数据库，就难免少不了事务的四大特性，也就所所谓的ACID，原子性（Atomic），一致性（ Consistency ），隔离性（ Isolation ），持久性（ Durability ）。那么MySQL中的InnoDB存储引擎是如何实现的事务的ACID呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​         说到数据库，就难免少不了事务的四大特性，也就所所谓的ACID，原子性（Atomic），一致性（ Consistency ），隔离性（ Isolation ），持久性（ Durability ）。那么MySQL中的InnoDB存储引擎是如何实现的事务的AC
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql从入门到放弃（一）</title>
    <link href="http://yoursite.com/2020/02/11/mysql%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2020/02/11/mysql%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-02-11T03:10:52.000Z</published>
    <updated>2020-03-16T02:39:25.371Z</updated>
    
    <content type="html"><![CDATA[<p>​        MySQL数据库是当今市场最热门的关系数据库之一，在被Oracle收购之后，新版的MySQL已经支持非关系型数据库，所以作为程序员对MySQL还是需要了解其中的知识，这样才能在出现相关问题的时候，快速定位问题。</p><h2 id="MySQL架构体系"><a href="#MySQL架构体系" class="headerlink" title="MySQL架构体系"></a>MySQL架构体系</h2><p>​        如果需要深入了解MySQL，则需要从MySQL底层的架构体系入手，首先来一张MySQL的底层架构图：</p><p><img src="/2020/02/11/mysql%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%88%E4%B8%80%EF%BC%89/mysqlframework.jpg" alt></p><p>​        对于MySQL的多个迭代版本来说，虽然有很多版本，但是每个版本的基本架构不会有太大的变化，所以掌握的其中的底层架构知识，对每个版本的入手都会相对于容易。</p><p>​        MySQL的底层架构大致由一下几大模块组成：</p><ul><li>MySQL向外部提供连接API（Connectors）</li><li>管理服务组件和工具组件（Management Service &amp; Utilities）</li><li>数据库连接池（Connection Pool）</li><li>SQL接口（SQL Interface）</li><li>解析器与预处理器（Parser）</li><li>查询优化器（Optimizer）</li><li>缓存组件（Caches &amp; Buffers）</li><li>存储引擎（Pluggable Storage Engines）</li><li>物理存储层（File System）</li></ul><p>​    从概念上说可以分为4层，这四层自顶向下分别是：<font color="red"><strong>网络连接层</strong></font>（Connectors），<font color="red"><strong>服务层</strong></font>（Management Service &amp; Utilities、Connection Pool、SQL Interface、Parser、Optimizer、Caches &amp; Buffers），<font color="red"><strong>存储引擎层</strong></font>（Pluggable Storage Engines），<font color="red"><strong>系统文件层</strong></font>（File System）。</p><h2 id="网络连接层"><a href="#网络连接层" class="headerlink" title="网络连接层"></a>网络连接层</h2><p>​        这一层主要负责连接管理、授权认证、安全等等。MySQL对外提供连接的API，外部可以通过MySQL提供的API实现对MySQL的交互。当客户端连接MySQL服务器时，MySQL服务器会对其进行认证，可以通过用户名与密码认证，也可以通过SSL整数进行认证。这一层并不是MySQL所特有的技术。比如java可以通过MySQL提供的第三方jar包，初始化相关信息之后，就可以通过SQL语句对MySQL数据库的CRUD操作。</p><h2 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h2><p>​        服务层是MySQL的核心层，这一层涉及的东西很多，比如查询解析，SQL执行计划分析，SQL执行计划优化，查询缓存，以及数据的备份、恢复、安全管理等。都在这一层进行操作。</p><h3 id="管理服务和工具组件"><a href="#管理服务和工具组件" class="headerlink" title="管理服务和工具组件"></a>管理服务和工具组件</h3><p>​        管理服务和工具组件提供了对MySQL的集成管理，如数据的备份、恢复、安全管理等。</p><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><p>​        数据库连接池负责监听对客户端向MySQL Server端的各种请求，接收请求，转发请求到目标模块。每个成功连接MySQL Server的客户请求都会被创建或分配一个线程，该线程负责客户端与MySQL Server端的通信，接收客户端发送的命令，传递服务端的结果信息等。</p><p>​        <strong>为什么要设计线程池？</strong></p><p>​        在服务器内部，每个Client都要有自己的线程。这个连接的查询都在一个单独的线程中执行。想象现实场景中数据库访问连接实在是太多了，如果每次连接都要创建一个线程，同时还要负责该线程的销毁。对于系统来说是多么大的消耗。由于线程是操作系统宝贵的资源。这时候线程池的出现就显得自然了，服务器缓存了线程，因此不需要为每个Client连接创建和销毁线程。</p><p>​        接下来通过一张图来了解服务层剩下的模块：<br><img src="/2020/02/11/mysql%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%88%E4%B8%80%EF%BC%89/mysqlframework02.png" alt></p><h3 id="查看缓存"><a href="#查看缓存" class="headerlink" title="查看缓存"></a>查看缓存</h3><p>​        在MySQL的性能优化方面经常涉及到缓冲区（buffer）和缓存（cache），MySQL通过在内存中建立缓冲区（buffer）和缓冲（cache）来提高MySQL性能。对于InnoDB数据库，MySQL采用缓冲池（buffer pool）的方式来缓存数据和索引；对于MyISAM数据库，MySQL采用缓存的方式来缓存数据和索引。</p><p>​        MySQL查询缓存机制（query cache）简单的说就是缓存SQL语句及查询结果，如果运行相同的SQL，服务器直接从缓存中提取结果，而不是再去解析和执行SQL。 </p><h3 id="解析器和预处理器"><a href="#解析器和预处理器" class="headerlink" title="解析器和预处理器"></a>解析器和预处理器</h3><p>​        MySQL服务器接收SQL格式的查询，首先要对SQL进行解析，内部将文本格式转换为二进制结构，这个转换就是解析器，解析的目的是为了让优化器更好的处理指令，以便以最优的路径，最少的耗时返回我们想要的结果。</p><p>​        解析器的构成 ：</p><ul><li>词法分析：作用是将整个查询分解为多个元素 。</li><li>语法规则：寻找SQL语法规则组合，产生一个序列，执行这些规则相关的代码。 </li></ul><p>​        通过这两点之后会产生一棵解析树，提供给优化器使用。MySQL解析器的特殊性在于它直接转换为程序内存中内部解析的C/C++结构，而一般的解析器是将文本表达式转换为字节代码。  </p><h3 id="查询优化器"><a href="#查询优化器" class="headerlink" title="查询优化器"></a>查询优化器</h3><p>​        多数情况下，一条查询可以有很多种执行方式，最后都返回相应的结果。 优化器的作用就是找到这其中最好的执行计划。而实际中通过Explain语句对SQL的执行计划查询，可以优化SQL语句，优化性能。</p><h3 id="查询引擎"><a href="#查询引擎" class="headerlink" title="查询引擎"></a>查询引擎</h3><p>​        在完成解析和优化阶段以后，MySQL会生成对应的执行计划，查询执行引擎根据执行计划给出的指令调用存储引擎的接口得出结果。 </p><h2 id="存储引擎层"><a href="#存储引擎层" class="headerlink" title="存储引擎层"></a>存储引擎层</h2><p>​        常见的两种存储引擎，InnoDB和MyISAM，两者的特点：</p><p>​        <font color="red"><strong>InnoDB</strong></font></p><p>​        InnoDB是默认的事务型存储引擎，也是最重要，使用最广泛的存储引擎。在没有特殊情况下，一般优先使用InnoDB存储引擎。支持行级锁，从MySQL5.5.8开始,InnoDB存储引擎是默认的存储引擎。</p><p>​        <font color="red"><strong>MyISAM</strong></font></p><p>​        不支持事务，表锁设计，支持全文索引，主要应用于OLAP应用。在排序、分组等操作中，当数量超过一定大小之后，由查询优化器建立的临时表就是MyISAM类型。</p><p>​        除此之外还有Memory、CSV、Federated、Archive等等。</p><h2 id="系统文件层"><a href="#系统文件层" class="headerlink" title="系统文件层"></a>系统文件层</h2><p>​        该层主要是讲数据库的数据存储到文件上，并且和存储引擎层进行数据交互。不同的存储引擎储存的方式不同，通过InnoDB和MyISAM来分析。</p><p>​        <font color="red"><strong>InnoDB</strong></font></p><p>​        InnoDB分两种文件进行存储，一种是存储表的元信息，<code>.frm</code>扩展名用来存储表相关的元信息，包括表结构到的定义信息等。</p><p>​        另一种存放表中的数据，其中存放表中的数据由两种方式，<strong>共享表空间</strong>和<strong>独享表空间</strong>，其中共享表空间使用的是<code>.ibdata</code>扩展名存储数据，所有的表共同使用一个ibdata文件；而独享表空间使用的<code>.ibd</code>扩展名存储数据，并且每个表都有一个idb文件。<strong>InnoDB默认的方式是独享表空间, 这种方式的好处是当数据库产生大量文件碎片的时，整理磁盘碎片对线上运行环境的影响较小</strong></p><p>​        <font color="red"><strong>MyISAM</strong></font></p><p>​        MyISAM使用的是三种文件进行存储：</p><p>​        .frm文件：与表相关的元数据信息都存放在frm文件，包括表结构的定义信息等。</p><p>​        .MYD文件：MyISAM存储引擎专用，用于存储MyISAM表的数据。</p><p>​        .MYI文件：MyISAM存储引擎专用，用于存储MyISAM表的索引相关信息。</p><p>​        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​        MySQL数据库是当今市场最热门的关系数据库之一，在被Oracle收购之后，新版的MySQL已经支持非关系型数据库，所以作为程序员对MySQL还是需要了解其中的知识，这样才能在出现相关问题的时候，快速定位问题。&lt;/p&gt;
&lt;h2 id=&quot;MySQL架构体系&quot;
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>JDBC连接mysql</title>
    <link href="http://yoursite.com/2020/02/09/JDBC%E8%BF%9E%E6%8E%A5mysql/"/>
    <id>http://yoursite.com/2020/02/09/JDBC%E8%BF%9E%E6%8E%A5mysql/</id>
    <published>2020-02-09T06:51:14.000Z</published>
    <updated>2020-03-11T09:17:47.233Z</updated>
    
    <content type="html"><![CDATA[<p>​        JDBC连接数据库，这是所有Java入门程序员都必须掌握的一个知识点。现在的持久层框架都已经封装好了，原生的JDBC代码都已经用不到了。但是面试中难免会问到，别问我为什么知道，都是泪。。。</p><h2 id="Maven工程"><a href="#Maven工程" class="headerlink" title="Maven工程"></a>Maven工程</h2><p>​        由于需要依赖第三方（mysql）的jar包，所以选用的是Maven工程。在Maven工程pom.xml文件添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- lombok依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        由于需要用到@data注解，所以加了一个lombok依赖。</p><h2 id="JDBC连接代码"><a href="#JDBC连接代码" class="headerlink" title="JDBC连接代码"></a>JDBC连接代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement statement = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 加载类驱动</span></span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    <span class="comment">// 通过驱动管理器获取数据库连接</span></span><br><span class="line">    connection = DriverManager.getConnection(<span class="string">"jdbc:mysql:///learn?characterEncoding=utf-8"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    <span class="comment">// 准备sql语句</span></span><br><span class="line">    String selectSql = <span class="string">"select * from student where id = ?"</span>;</span><br><span class="line">    statement = connection.prepareStatement(selectSql);</span><br><span class="line">    <span class="comment">// 对占位符赋值</span></span><br><span class="line">    statement.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    rs = statement.executeQuery();</span><br><span class="line">    <span class="comment">// 将查询结果返回并转换为对象</span></span><br><span class="line">    List&lt;Student&gt; students = resultToObject(rs, Student<span class="class">.<span class="keyword">class</span>)</span>;        </span><br><span class="line">        <span class="keyword">for</span> (Student s : students) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 关闭所有资源</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != rs) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != statement)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != connection)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        导入了mysql提供的第三方jar包之后，先要加载JDBC连接mysql 的驱动类：<strong>Class.forName(“com.mysql.jdbc.Driver”)</strong>，然后通过驱动管理器获取数据库连接，通过<strong>connection.prepareStatement(selectSql)</strong>获取一个预处理statement，预处理statement对占位符进行赋值，索引从1开始；然后执行查询（executeQuery()），或者更新（executeUpdate()），executeQuery()返回的是一个结果集对象ResultSet；通过<strong>resultToObject()</strong>方法，将返回的数据封装成对象。</p><h2 id="将结果集封装成对象"><a href="#将结果集封装成对象" class="headerlink" title="将结果集封装成对象"></a>将结果集封装成对象</h2><p>​        首先需要一个实体类Studen：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.zdz.weak1.entry;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        <strong>resultToObject()</strong>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">resultToObject</span><span class="params">(ResultSet resultSet, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">    List&lt;T&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            <span class="comment">// 通过反射获取对象实例</span></span><br><span class="line">            T t = clazz.getConstructor().newInstance();</span><br><span class="line">            <span class="comment">// 获取每一行中所有列的信息</span></span><br><span class="line">            ResultSetMetaData metaData = resultSet.getMetaData();</span><br><span class="line">            <span class="comment">// 遍历mataData获取每个列中的信息</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; metaData.getColumnCount();i++)&#123;</span><br><span class="line">                <span class="comment">// 通过索引获取某个列的信息，从1开始</span></span><br><span class="line">                String column1 = metaData.getColumnName(i + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 通过反射将结果集中的字段名与实体对象中的属性名相对应</span></span><br><span class="line">                <span class="comment">// 需要使用getDeclaredField() 方法获取私有属性</span></span><br><span class="line">                Field f = clazz.getDeclaredField(column1);</span><br><span class="line">                <span class="comment">// 当isAccessible()的结果是false时不允许通过反射访问该字段</span></span><br><span class="line">                <span class="comment">// 当该字段时private修饰时isAccessible()得到的值是false</span></span><br><span class="line">                <span class="comment">// 必须要改成true才可以访问</span></span><br><span class="line">                f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                <span class="comment">// 将结果集中的值赋给相应的对象实体的属性</span></span><br><span class="line">                f.set(t, resultSet.getObject(column1));</span><br><span class="line">            &#125;</span><br><span class="line">            resultList.add(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        上面的这个方法通过反射进行将结果集封装成对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​        JDBC连接数据库，这是所有Java入门程序员都必须掌握的一个知识点。现在的持久层框架都已经封装好了，原生的JDBC代码都已经用不到了。但是面试中难免会问到，别问我为什么知道，都是泪。。。&lt;/p&gt;
&lt;h2 id=&quot;Maven工程&quot;&gt;&lt;a href=&quot;#Ma
      
    
    </summary>
    
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>find bugs插件问题总结</title>
    <link href="http://yoursite.com/2020/01/14/find-bugs%E6%8F%92%E4%BB%B6%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/01/14/find-bugs%E6%8F%92%E4%BB%B6%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2020-01-14T06:56:47.000Z</published>
    <updated>2020-03-11T09:36:37.360Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 总结项目中遇到的各种bug，长期更新。使用idea一定要安装一个阿里巴巴的find bugs插件，可以减少代码的bug，以及提升系统性能。  </p><p>&ensp; Findbugs是一个静态分析工具，它检查类或者JAR 文件，将字节码与一组缺陷模式进行对比以发现可能的问题。Findbugs自带检测器，其中有60余种Bad practice，80余种Correctness，1种 Internationalization，12种Malicious code vulnerability，27种Multithreaded correctness，23种Performance，43种Dodgy。  </p><a id="more"></a>  <p>&ensp; <code>Bad practice</code>:坏的实践，<code>Correctness</code>:可能导致错误的代码，<code>Performance</code>:性能问题，<code>Dodgy</code>:具有潜在危险的代码等等…</p><h4 id="1-Inefficient-use-of-keySet-iterator-instead-of-entrySet-iterator"><a href="#1-Inefficient-use-of-keySet-iterator-instead-of-entrySet-iterator" class="headerlink" title="1.Inefficient use of keySet iterator instead of entrySet iterator."></a>1.Inefficient use of keySet iterator instead of entrySet iterator.</h4><p>在进行迭代map对象时，使用的时map.keySet()，建议使用entrySet。<br><strong>原代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; init map</span><br><span class="line"></span><br><span class="line">for (String key : map.keySet()) &#123;</span><br><span class="line">&#x2F;&#x2F; 取出key对应的value</span><br><span class="line">Object obj &#x3D; map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>建议修正后代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; init map</span><br><span class="line"></span><br><span class="line">for (Map.Entry&lt;String, Object&gt; entry : map.entrySet())&#123;</span><br><span class="line">&#x2F;&#x2F; 获取key</span><br><span class="line">String key &#x3D; entry.getKey();</span><br><span class="line">&#x2F;&#x2F; 获取对应value</span><br><span class="line">Object obj &#x3D; entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用keySet迭代器是低效地，用entrySet迭代器会更高效，entrySet迭代器 : keySet迭代器大致是1.5 : 1。  </p><h4 id="2-Boxed-value-is-unboxed-and-then-immediately-reboxed"><a href="#2-Boxed-value-is-unboxed-and-then-immediately-reboxed" class="headerlink" title="2.Boxed value is unboxed and then immediately reboxed."></a>2.Boxed value is unboxed and then immediately reboxed.</h4><p>装箱后的值先拆箱，然后立即重新装箱。<br><strong>原代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User user &#x3D; new User();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; User存在一个Integer类型的age。</span><br><span class="line"></span><br><span class="line">Integer age &#x3D; user.getAge();</span><br><span class="line">&#x2F;&#x2F; 如果age为null，则将其设置为0.</span><br><span class="line">age &#x3D; age &#x3D;&#x3D; null ? 0 : age;</span><br></pre></td></tr></table></figure><p>此问题在于age不为null时，会被拆箱，赋值时再装箱。这是自动装箱拆箱的特性，只要运算中有不同类型，当涉及到类型转换时，编译器就会向下转型，再进行运算。  </p><p><strong>建议修正后代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age &#x3D; age &#x3D;&#x3D; null ? Integer.valueOf(0) : age;</span><br></pre></td></tr></table></figure><h4 id="3-Null-pointer-dereference"><a href="#3-Null-pointer-dereference" class="headerlink" title="3.Null pointer dereference"></a>3.Null pointer dereference</h4><p>这里泛指空指针错误，遇到不同类型的都会在这个下面进行记录。  </p><h5 id="3-1-Unboxing-of-‘xxx’-may-produce-‘java-lang-NullPointerException’-这个问题是项目开发中遇到的！"><a href="#3-1-Unboxing-of-‘xxx’-may-produce-‘java-lang-NullPointerException’-这个问题是项目开发中遇到的！" class="headerlink" title="3.1 Unboxing of ‘xxx’ may produce ‘java.lang.NullPointerException’(这个问题是项目开发中遇到的！)"></a>3.1 Unboxing of ‘xxx’ may produce ‘java.lang.NullPointerException’(这个问题是项目开发中遇到的！)</h5><p>这个空指针当时可耗费我很多时间去找，为何这一行代码会报空指针呢？上代码：<br><strong>原代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">User user &#x3D; new User();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; User存在一个Integer类型的age。</span><br><span class="line"></span><br><span class="line">if(null !&#x3D; user)&#123;</span><br><span class="line">&#x2F;&#x2F; 这一行报NPE</span><br><span class="line">int age &#x3D; user.getAge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当时我震惊了，这个为啥会报NPE呢？问题就出现在Integer类型在向下转型的时候报的。user.getAge()为null，在向下转型时，null不能转为基本数据类型，所以报NPE。</p><p><strong>3.2 NPE</strong></p><p>在使用boolean类型的封装类Boolean时，需要注意一个问题，也容易导致空指针。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User存在一个Boolean类型的flag。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NPE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!user.getFlag())&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>13行，!user.getFlag，这个NPE了，在对Boolean类型取反的时候，要判断是否为null，否则会出现NPE。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 总结项目中遇到的各种bug，长期更新。使用idea一定要安装一个阿里巴巴的find bugs插件，可以减少代码的bug，以及提升系统性能。  &lt;/p&gt;
&lt;p&gt;&amp;ensp; Findbugs是一个静态分析工具，它检查类或者JAR 文件，将字节码与一组缺陷模式进行对比以发现可能的问题。Findbugs自带检测器，其中有60余种Bad practice，80余种Correctness，1种 Internationalization，12种Malicious code vulnerability，27种Multithreaded correctness，23种Performance，43种Dodgy。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="代码规范" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="IDEA" scheme="http://yoursite.com/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>CompletableFuture的实际应用</title>
    <link href="http://yoursite.com/2020/01/13/CompletableFuture%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2020/01/13/CompletableFuture%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</id>
    <published>2020-01-13T03:30:08.000Z</published>
    <updated>2020-01-13T08:29:52.782Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 当某个接口调用时长较长，接口中一系列微服务接口的调用，这时可以整理出一个耗时较长的接口，让其异步调用，在最后进行阻塞主线程进行获取结果。这个耗时较长的接口最先进行异步调用，再调用其他接口。如果其他接口的总耗时大于或等于这个耗时较长的接口，可以说减少了这个耗时较长的时间，优化了接口调用时长问题。可能说的有点绕，但是通过下图便可一目了然。  </p><a id="more"></a><p><img src="/2020/01/13/CompletableFuture%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/01.png" alt>  </p><p>&ensp; 由上图很清楚的可以知道，优化前在主线程中同步调用所有接口，由于method4接口耗时0.5，其他4个接口的总时长为0.5，如果走同步调用则总耗时为1。<br>&ensp; 对接口进行优化，让method4在主线程刚开始时，进行另开一个子线程异步调用，其他接口同步进行。在主线程中所有接口调用完毕之后，也就是在method5之后，阻塞主线程，去获取子线程中method4接口的结果，这样就优化了接口耗时。当然这只是理想中的，实际上，可能其它接口对method4返回的结果存在依赖，这样子就需要把依赖method4的接口放在阻塞获取method4结果之后进行调用，所以具体情况具体分析。  </p><p>&ensp; 下面来看一个小demo，<a href="https://github.com/zdzhong/main_test" target="_blank" rel="noopener">代码地址</a>，首先是5个function，function1耗时100ms：  </p><p>function1耗时100ms：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void function1()&#123;</span><br><span class="line">        &#x2F;&#x2F; 模拟方法耗时100ms</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(100);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>function2耗时200ms：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void function2()&#123;</span><br><span class="line">        &#x2F;&#x2F; 模拟方法耗时200ms</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(200);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>function3耗时200ms：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void function3()&#123;</span><br><span class="line">        &#x2F;&#x2F; 模拟方法耗时200ms</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(200);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>function4耗时500ms，有返回结果：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private int function4()&#123;</span><br><span class="line">        &#x2F;&#x2F; 模拟方法耗时500ms</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(500);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return 4;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>function5耗时100ms，需要依赖function4返回的结果：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private int function5(int a)&#123;</span><br><span class="line">        &#x2F;&#x2F; 模拟方法耗时100ms</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(100);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return a + 5;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在没有使用CompletableFuture的代码:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void regularTest()&#123;</span><br><span class="line">        long startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">        function1();</span><br><span class="line">        function2();</span><br><span class="line">        function3();</span><br><span class="line">        int result &#x3D; function4();</span><br><span class="line">        result &#x3D; function5(result);</span><br><span class="line">        long endTime &#x3D; System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;运行结果：&quot; + result + &quot;,耗时：&quot; + (endTime - startTime));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个就纯粹的所有function耗时加起来，总耗时1104，运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行结果：9,耗时：1104</span><br></pre></td></tr></table></figure><p>在使用CompletableFuture的代码:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void completableFutureTest()&#123;</span><br><span class="line">    long startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">    &#x2F;&#x2F; 在进入主线程时首先异步调用function4</span><br><span class="line">    CompletableFuture&lt;Integer&gt; future &#x3D; CompletableFuture.supplyAsync(this::function4);</span><br><span class="line">    &#x2F;&#x2F; 其他接口同步进行</span><br><span class="line">    function1();</span><br><span class="line">    function2();</span><br><span class="line">    function3();</span><br><span class="line">    int result &#x3D; 0;</span><br><span class="line">    &#x2F;&#x2F; function5依赖function4返回的结果</span><br><span class="line">    try &#123;</span><br><span class="line">        result &#x3D; future.get();</span><br><span class="line">    &#125; catch (Exception e)&#123;</span><br><span class="line">        result &#x3D; 1;</span><br><span class="line">        logger.error(&quot;error!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    result &#x3D; function5(result);</span><br><span class="line">    long endTime &#x3D; System.currentTimeMillis();</span><br><span class="line">    System.out.println(&quot;运行结果：&quot; + result + &quot;,耗时：&quot; + (endTime - startTime));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于刚开始进入时就异步调用function4，然后同时和function1，function2，function3进行操作，function1，function2，function3的总耗时为500ms，function4的耗时为500ms，这样就相当于减少了function4的耗时。总体耗时653，运行结果：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行结果：9,耗时：653</span><br></pre></td></tr></table></figure><p><code>CompletableFuture.supplyAsync(Supplier&lt;U&gt; supplier)</code> 新建一个线程来运行Supplier对象(有返回值)，在需要用的地方可以使用CompletableFuture.get()进行获取。  </p><p><code>CompletableFuture.runAsync(Runnable runnable)</code> 新建一个线程来运行Runnable对象(无返回值)。<br>over.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 当某个接口调用时长较长，接口中一系列微服务接口的调用，这时可以整理出一个耗时较长的接口，让其异步调用，在最后进行阻塞主线程进行获取结果。这个耗时较长的接口最先进行异步调用，再调用其他接口。如果其他接口的总耗时大于或等于这个耗时较长的接口，可以说减少了这个耗时较长的时间，优化了接口调用时长问题。可能说的有点绕，但是通过下图便可一目了然。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="项目经验" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>TCP详解</title>
    <link href="http://yoursite.com/2020/01/10/TCP%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/01/10/TCP%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-01-10T03:28:17.000Z</published>
    <updated>2020-01-10T09:49:47.425Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，为用户进程提供可靠的全双工字节流。位于计算机网络五层体系结构（物理层、数据链路层、网络层、运输层、应用层）中的运输层。  </p><h3 id="TCP数据包的组成"><a href="#TCP数据包的组成" class="headerlink" title="TCP数据包的组成"></a>TCP数据包的组成</h3><p>&ensp; 首先看一下tcp报文的头部： </p><a id="more"></a>   <p><img src="/2020/01/10/TCP%E8%AF%A6%E8%A7%A3/tcp01.png" alt>  </p><p>&ensp; <strong>16位的源端口号与16位的目的端口号</strong><br>用于寻找发送端和目的端应用进程。当然这只能用来确认某个主机中的进程，但是无法确认是哪一个主机，这个艰巨的任务就交由网络层的ip协议。  </p><p>&ensp; <strong>32位的序号</strong><br>TCP会话的每一端都包含一个32位（bit）的序列号，该序列号被用来跟踪发送端发送的数据量。在刚建立的的时候该值为随机值（随机算法：ISN=M + F(localhost, localport, remotehost, remoteport)，M是一个计时器，这个计时器每隔4毫秒加1。F是一个Hash算法，根据源IP、目的IP、源端口、目的端口生成一个随机数值。要保证hash算法不能被外部轻易推算得出），以后再将每次成功转发过去的<strong>字节数</strong>累加到初始值上表示数据的位置。每一个包中都包含序列号，在接收端则通过确认号用来通知发送端数据成功接收。  </p><p>&ensp; <strong>32位的确认序号</strong><br>这个确认序号用来表示为当前端从建立连接开始到目前接收的数据位数+1。（表示下一次应该收到的数据位置，发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收）  </p><p>&ensp; <strong>4位的偏移量</strong><br>数据偏移量也叫首部长度，用于记录tcp数据报首部的长度，一般为20字节，实际值为首部长度除以4。  </p><p>&ensp; <strong>标志位</strong><br>标志位字段长为6，每一位从左到右分别为：URG、ACK、PSH、RST、SYN、FIN。当对应的值为1，表示有具体含义:<br>URG:紧急指针是否有效。为1，表示某一位需要被优先处理。<br>ACK:确认号是否有效，一般置为1。<br>PSH:提示接收端应用程序立即从TCP缓冲区把数据读走。<br>RST :对方要求重新建立连接，复位。<br>SYN:为1表示请求建立连接，并在其序列号的字段进行序列号的初始值设定。<br>FIN:希望断开连接。  </p><p>&ensp; <strong>16位的窗口大小</strong><br>接收缓冲区的大小，TCP不允许发送超过此处所示大小的数据。  </p><p>&ensp; <strong>16位的校验和</strong><br>发送端填充，CRC校验，接收校验不通过，则认为数据有问题。和UDP的区别是，UDP校验的是数据本身，TCP校验的不仅包含TCP首部，而且包含TCP数据部分。  </p><p>&ensp; <strong>16位的紧急指针</strong><br>只有在URG为1时有效，该字段为1表示本报文的段中的紧急数据的指针。  </p><h3 id="三次握手建立连接"><a href="#三次握手建立连接" class="headerlink" title="三次握手建立连接"></a>三次握手建立连接</h3><p>&ensp; 第一次握手，客户端会发送一个标志位SYN=1（表示请求建立连接），序列号（seq）=X（随机生成的初始化值）的数据包给服务端主机。  </p><p>&ensp; 第二次握手，服务端收到客户端的建立连接请求，会发送一个标志位SYN=1,ACK=1，序列号（seq）=Y，确认序列号（ack）=X+1的数据包给客户端。  </p><p>&ensp; 第三次握手，当客户端收到数据包之后，知道了之前序列号=X的数据包已经被服务端收到，但是此时，服务端还不知道客户端有没有收到自己的确认包，所以，客户端会再次发送一个数据包，用来通知服务端自己已经收到它的确认包了，所以这个包里面的标志位只有ACK=1，表示确认包，并且序列号=X+1，确认号=Y+1，为什么都是+1 ？因为这三个包是特殊的包，专门用来建立连接的，所以并没有真实的有效数据，如果有有效数据，则还需要加上接收到的数据长度。此包发送完毕，客户端和服务器进入ESTAB_LISHED(TCP连接成功)状态，完成三次握手，接下来就可以传输数据了。<br>&ensp; <strong>第三次握手的报文是可以携带有效数据的</strong>，下面是一张tcp建立连接-传输数据-关闭连接图<br><img src="/2020/01/10/TCP%E8%AF%A6%E8%A7%A3/tcp02.png" alt></p><p>&ensp; <strong>为什么时三次握手，两次不行吗？</strong><br>如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。  </p><p>&ensp; <strong>什么是半连接队列？</strong><br>服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD  状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个队列里，我们把这种队列称之为半连接队列。  </p><p>当然还有一个全连接队列，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。  </p><p>这里在补充一点关于SYN-ACK 重传次数的问题：</p><p>服务器发送完SYN-ACK包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传。如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。</p><p>注意，每次重传等待的时间不一定相同，一般会是指数增长，例如间隔时间为 1s，2s，4s，8s…  </p><p>&ensp; <strong>SYN攻击是什么？</strong><br>服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的，所以服务器容易受到SYN洪泛攻击。SYN攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断地发送SYN包，Server则回复确认包，并等待Client确认，由于源地址不存在，因此Server需要不断重发直至超时，这些伪造的SYN包将长时间占用未连接队列，导致正常的SYN请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。SYN 攻击是一种典型的 DoS/DDoS 攻击。  </p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p>建立一个连接需要三次握手，而终止一个连接要经过四次挥手，这由TCP的半关闭造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。  </p><p>&ensp; 第一次挥手，客户端发送一个 FIN 报文，报文中会指定一个序列号。即发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，等待服务端的确认。  </p><p>&ensp; 第二次挥手，服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了。即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），此时的TCP处于半关闭状态，客户端到服务端的连接释放。  </p><p>&ensp; 第三次挥手，如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），等待客户端的确认。  </p><p>&ensp; 第四次挥手，客户端收到FIN之后，一样发送一个ACK报文作为应答，且把服务端的序列号值 +1 作为自己ACK报文的序列号值，需要过一阵子以确保服务端收到自己的ACK报文之后才会关闭连接，服务端收到 ACK 报文之后，就处于关闭连接了。即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1）。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才关闭连接。  </p><p>&ensp; <strong>挥手为什么需要四次</strong><br>因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，“你发的FIN报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四次挥手。  </p><p>&ensp; <strong>四次挥手释放连接时，等待2MSL的意义?</strong><br>每个具体TCP实现必须选择一个报文段最大生存时间MSL(Maximum Segment Lifetime)。它是任何报文段被丢弃前在网络内的最长时间。我们知道这个时间是有限的，因为TCP报文段以IP数据报在网络内传输，而IP数据报则有限制其生存时间的TTL字段。<br>对一个具体实现所给定的MSL值，处理的原则是：当TCP执行一个主动关闭，并发回最后一个ACK，该连接必须在TIME_WAIT状态停留的时间为2倍的MSL。这样可让TCP再次发送最后的ACK以防这个ACK丢失(<strong>另一端超时并重发最后的FIN</strong>)。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，为用户进程提供可靠的全双工字节流。位于计算机网络五层体系结构（物理层、数据链路层、网络层、运输层、应用层）中的运输层。  &lt;/p&gt;
&lt;h3 id=&quot;TCP数据包的组成&quot;&gt;&lt;a href=&quot;#TCP数据包的组成&quot; class=&quot;headerlink&quot; title=&quot;TCP数据包的组成&quot;&gt;&lt;/a&gt;TCP数据包的组成&lt;/h3&gt;&lt;p&gt;&amp;ensp; 首先看一下tcp报文的头部： &lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="tcp" scheme="http://yoursite.com/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="http://yoursite.com/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://yoursite.com/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/</id>
    <published>2020-01-07T01:26:56.000Z</published>
    <updated>2020-01-09T07:53:44.470Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 一说到数据结构就头疼，可是面试官爱问呀！没办法，来吧！<br>记忆中的红黑树，由红黑节点组成的一颗树（二叉树？），没了，什么都不记得了！</p><p>&ensp; 首先红黑树是在平衡二叉排序树的基础上进修扩展的，所以需要掌握二叉排序树。  </p><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><p>&ensp; 二叉排序树是一颗二叉树，对于树的每个节点是这样定义的：<br><strong>1.若左子树不为空，则左子树的所有节点均小于根节点的值</strong><br><strong>2.若右子树部位空，则右子树的所有节点均大于根节点的值</strong><br><strong>3.左，右子树分别也是二叉排序树</strong>  </p><a id="more"></a><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>&ensp; 普通的二叉排序树存在极不平衡的情况，导致整棵树的深度非常深，使得二叉排序树的时间复杂度退化成O(n)。<br>&ensp; 平衡二叉树的定义：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。<br>&ensp; 解决这种情况的做法，在往一棵树中插入一个新的节点时，如果二叉树的左右高度超过1时，进行左旋、右旋、先右旋再左旋、先左旋再右旋。  </p><p><strong>右旋</strong><br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/right.png" alt="右旋">  </p><p><strong>左旋</strong><br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/left.png" alt="右旋">  </p><p><strong>先右旋再左旋</strong><br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/right_left.png" alt="先右旋再左旋">  </p><p><strong>先左旋再右旋</strong><br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/left_right.png" alt="先左旋再右旋">  </p><p>这里举例是结合了二叉排序树和平衡二叉树，接下来就轮到的红黑树。  </p><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p>&ensp; 红黑树的特性：<br><strong>1.每个节点要么是黑色，要么是红色。</strong><br><strong>2.根节点是黑色。</strong><br><strong>3.每个叶子节点（null）是黑色。</strong><br><strong>4.每个红色结点的两个子结点一定都是黑色。</strong><br><strong>5.任意一结点到每个叶子结点的路径都包含数量相同的黑结点。</strong><br>&ensp; 所有的叶子节点都为null。红黑树有这么多的特性，如果对某个红黑树进行插入或者删除，是如何达到这种平衡呢？那就是来自红黑树的自平衡，红黑树之所以很难，就是每次插入或者删除操作都会打破这种平衡。  </p><p><strong>插入</strong><br>&ensp; 每次插入操作之前都需要查找，需要插入的位置。对于查找算法，如下：<br><strong>1.从根结点开始查找</strong><br><strong>2.若根结点为空，那么插入结点作为根结点，结束</strong><br><strong>3.若根结点不为空，那么把根结点作为当前结点</strong><br><strong>4.若当前结点为null，返回当前结点的父结点，结束</strong><br><strong>5.若当前结点key等于查找key，那么该key所在结点就是插入结点，更新结点的值，结束</strong><br><strong>6.若当前结点key大于查找key，把当前结点的左子结点设置为当前结点，重复步骤4</strong><br><strong>7.若当前结点key小于查找key，把当前结点的右子结点设置为当前结点，重复步骤4</strong><br>所有的叶子节点都是null节点，所以一定能找到插入位置。<br>&ensp; 假设当前的节点为节点1，有如下的约定：<br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/appointment01.png" alt><br>&ensp; 假设插入一个元素，那么有个问题，这个节点的颜色是啥？假设为黑色，那么每次插入的时候，该节点所在的路径上的黑色总会多一个，就需要进行自平衡。如果每次插入节点的颜色为红色，这样就存在插入后就已经达到了黑色平衡。所以每次插入的节点颜色为红色。<br>&ensp; 每次插入的情况有如下几种，如图：<br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/insert01.png" alt><br>&ensp; 插入操作情况存在这么多种，但是都左右对称。  </p><p><strong>删除</strong><br>&ensp; 接下来轮到删除了，删除操作就是查找对应的key，将该key对应的节点进行移除，但删除节点的位子需要有人顶替，所以在替换时对于替换的节点颜色和删除节点的位置进行分析。值得注意的是，如果删除的节点无子节点，直接删除即可。如果有一个子节点，用子结点替换删除结点。若删除结点有两个子结点，用后继结点（大于删除结点的最小结点）替换删除结点，也就是删除节点的右子树种最左结点。那么可以拿前继结点（删除结点的左子树最左结点）替代吗？可以的。但习惯上大多都是拿后继结点来替代。<br>&ensp; 每次删除的情况有如下几种，如图：<br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/delete01.png" alt> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 一说到数据结构就头疼，可是面试官爱问呀！没办法，来吧！&lt;br&gt;记忆中的红黑树，由红黑节点组成的一颗树（二叉树？），没了，什么都不记得了！&lt;/p&gt;
&lt;p&gt;&amp;ensp; 首先红黑树是在平衡二叉排序树的基础上进修扩展的，所以需要掌握二叉排序树。  &lt;/p&gt;
&lt;h3 id=&quot;二叉排序树&quot;&gt;&lt;a href=&quot;#二叉排序树&quot; class=&quot;headerlink&quot; title=&quot;二叉排序树&quot;&gt;&lt;/a&gt;二叉排序树&lt;/h3&gt;&lt;p&gt;&amp;ensp; 二叉排序树是一颗二叉树，对于树的每个节点是这样定义的：&lt;br&gt;&lt;strong&gt;1.若左子树不为空，则左子树的所有节点均小于根节点的值&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2.若右子树部位空，则右子树的所有节点均大于根节点的值&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;3.左，右子树分别也是二叉排序树&lt;/strong&gt;  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>HashMap源码分析</title>
    <link href="http://yoursite.com/2020/01/06/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/01/06/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2020-01-06T09:46:53.000Z</published>
    <updated>2020-03-13T09:20:05.212Z</updated>
    
    <content type="html"><![CDATA[<p>​        <code>Hashmap</code>涉及的知识点较多，印象中的<code>Hashmap</code>非线程安全，集合中的个数小于8时，使用的是数组加链表数据结构，用链表解决hash冲突，java8之后，冲突次数在大于8时，会转化为红黑树（好像当个数小于6个时，由红黑树转为链表）。  </p><p>&ensp;     其中扩容是有一个负载因子控制，默认为0.75，当<code>集合中的个数 &gt; 容量 * 负载因子</code> 时，会进行扩容，扩容之后的容量是之前的2倍。  </p><p>&ensp;     哈希算法忘记了，哈希冲突好像是如果通过哈希算法得到的该节点上有元素时，放在该节点的下个节点，如果也有元素时，继续下一个。</p><p>由此引出的知识点：</p><ul><li><p>为什么容量大小必须是2的次幂？</p></li><li><p>什么时候转换为红黑树？</p></li><li><p>为什么8的时候树化，4不可以吗？  </p></li></ul><p>通过源码验证上面描述是否准确，以及分析问题。</p><h3 id="Hashmap的属性"><a href="#Hashmap的属性" class="headerlink" title="Hashmap的属性"></a>Hashmap的属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;     </span><br><span class="line"><span class="comment">// 默认容量大小16（这个竟然忘记了）  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;            </span><br><span class="line"><span class="comment">// 最大容量2的30次方  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;         </span><br><span class="line"><span class="comment">// 默认的负载因子  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;  </span><br><span class="line"><span class="comment">// 转换为红黑树的门槛</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;  </span><br><span class="line"><span class="comment">// 由红黑树转换为链表的门槛  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"><span class="comment">// 在转变成树之前，还会有一次判断，只有键值对数量大于 64 才会发生转换。（竟然还有这个判断）  </span></span><br><span class="line"><span class="comment">// 这是为了避免在哈希表建立初期，多个键值对恰好被放入了同一个链表中而导致不必要的转化。  </span></span><br><span class="line"><span class="comment">// 且该值不能小于4 * TREEIFY_THRESHOLD</span></span><br></pre></td></tr></table></figure><h3 id="Hashmap的主要方法"><a href="#Hashmap的主要方法" class="headerlink" title="Hashmap的主要方法"></a>Hashmap的主要方法</h3><h4 id="hash-函数"><a href="#hash-函数" class="headerlink" title="hash()函数"></a>hash()函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        刚刚百度了一下Java中<code>^</code>运算符，这是一个异或运算（我是个菜鸡）<br>​        不用说这个<code>&gt;&gt;&gt;</code>我也不会，是时候总结一下了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;右移运算符，num &gt;&gt; <span class="number">1</span>,相当于num除以<span class="number">2</span>。 </span><br><span class="line">按二进制形式把所有的数字向右移动对应位数，低位移出（舍弃），高位的空位补符号位，即正数补零，负数补<span class="number">1</span>。符号位不变。</span><br><span class="line">所以-<span class="number">1</span> &gt;&gt; <span class="number">2</span>，还是等于-<span class="number">1</span>，无论右移多少位都为-<span class="number">1</span>  </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; 二进制右移补零操作符，左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充</span><br><span class="line">-<span class="number">1</span> &gt;&gt;&gt; <span class="number">2</span>，<span class="number">1073741823</span></span><br></pre></td></tr></table></figure><p>​        这就有一个问题-1 &gt;&gt; 2，无论右移多少位都是-1，那么左移呢？通过测试得，左移无论是正数还是负数都是低位补0，-1 &lt;&lt; 1，-2。</p><p>​        回归正题，hash算法，通过获取key的hashCode，再和key的hashCode无符号右移16位进行异或。</p><p>​        百度了一下其中的奥秘，现在还看不懂，先mark一下<a href="https://www.cnblogs.com/zxporz/p/11204233.html" target="_blank" rel="noopener">HashMap中的hash算法中的几个疑问</a></p><h4 id="put-函数"><a href="#put-函数" class="headerlink" title="put()函数"></a>put()函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 首先通过hash算法获取一个hash值，就是上面的hash函数</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 判断当前的table是不是空的，如果是空的则进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 判断i = (n - 1) &amp; hash数组索引为i处的Node是否有值</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 没有则直接插入</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 如果存在值的情况，相当于产生了hash碰撞，需要进行解决碰撞</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 判断tab[i]处节点的key是否与新插入的key相等</span></span><br><span class="line">        <span class="comment">// 如果相等则将tab[i]处节点的value覆盖成新插入节点的value</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 如果不等，则判断tab[i]处节点是否为红黑树节点</span></span><br><span class="line">        <span class="comment">// 如果是则需要通过红黑树的结构进行插入</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">// 如果不是红黑树节点，则会进行尾插入法，或则判断是否需要进行树化</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 对tab[i]桶进行迭代</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 如果p处节点的下个节点e为null，则将新put的节点放在最后</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 判断是否达到了树化的阈值</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 同样判断e处节点的key是否与新插入的key相等</span></span><br><span class="line">                <span class="comment">// 相等则将e处节点的value覆盖成新插入节点的value</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里就是如果key相等则进行覆盖操作</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        哇，一个put方法就这么多（要不放弃吧！），慢慢来吧！<br>​        首先put方法中调用的putVal这个方法。<br>​        putVal方法中，先把<code>table</code>赋值给tab，<code>tab.length</code>赋值给n，如果<code>table</code>为null或者<code>tab.length</code>等于0，则进行扩容。<br>​        调用resize方法，扩容方法等下分析。继续，resize之后获得一个新的<code>Node</code>数组，判断i = (n - 1) &amp; hash数组索引为i处的Node是否有值，如果没有值，则将键值对放在tab[i]处。<br>​        如果此处有值，则判断key是否存在<code>table</code>中，如果存在，则替换之前的值，如果不存在，则这个节点的拿下一个节点继续做判断。<br>​        其中有两点，第一点，如果当前节点的为红黑树数据结构，则新加入的节点会转为红黑树数据结构。<br>第二点，如果冲突的节点数已经达到8个，看是否需要改变冲突节点的存储结构，首先判断当前hashMap的容量，<br>如果不足64，只进行resize，扩容table，如果达到64，那么将冲突的存储结构为红黑树。</p><h4 id="resize-函数"><a href="#resize-函数" class="headerlink" title="resize()函数"></a>resize()函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">// HashMap使用的是懒加载，在第一次初始化的时候并不会去加载其它的属性</span></span><br><span class="line">    <span class="comment">// 只有在扩容的时候回去加载一些相关的参数</span></span><br><span class="line">    <span class="comment">// 所以如果第一次put的时候，会调用resize方法，table = null</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">// 在这里要清楚 threshold = 负载因子 * 容量</span></span><br><span class="line">    <span class="comment">// 但是在初始化的时候，this.thretableSizeForshold = tableSizeFor(initialCapacity);</span></span><br><span class="line">    <span class="comment">// tableSizeFor这个是计算大于等于入参的2的次幂最接近的值</span></span><br><span class="line">    <span class="comment">// 而且第一次扩容产生在第一次put的时候</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果oldCap大于0，说明这个resize方法被真正的扩容的地方调用</span></span><br><span class="line">    <span class="comment">// 否则只是第一次进行初始化</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新容量 = 旧容量 * 2</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 第一次put的时候会走到这里</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               </span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里就是扩容之后，需要将之前的元素进行重新插入</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 如果e = oldTab[j]为单节点，也就是e在旧的数组中所处的桶为单节点</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="comment">// 则将其放入新的数组中</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">// 如果e为红黑树节点，则进行红黑树的查分之类的操作（红黑树太难了没看）</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">// 这里是e节点在旧数组中所处的桶为链表，且节点数大于1</span></span><br><span class="line">                    <span class="comment">// 这里涉及到一个点，低位桶和高位桶，如下图</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">// oldCap假设为16(1 0 0 0 0)</span></span><br><span class="line">                        <span class="comment">// 这样如果e.hash &amp; oldCap如果等于0</span></span><br><span class="line">                        <span class="comment">// 说明在1的对位等与0，说明是低位桶</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// 首先确定头部是第一个e</span></span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                <span class="comment">// 这里是第二次以后进来，就把后面的低位桶节点放在e之后</span></span><br><span class="line">                                <span class="comment">// 这样就实现了尾插入</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 否则是高位桶</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 如果低位桶的不为null，直接将这个新的桶放在原来的数组索引上（新）</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 如果高位桶不为null，则将其放在高位上（旧索引 + 旧容量）</span></span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/06/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/low_hig_bin.png" alt="低位桶与高位桶"></p><p>​        到这里基本的方法讲完了，之前出现的问题也有答案了。</p><p>​        为什么容量大小必须是2的次幂？</p><p>​        这个根据通过看源码可发现，在进行获取当前节点在数组中所处的索引时，是通过hash(key.hashCode) &amp; (n - 1)，如果n不为2的次幂，则n-1会出现（10111）的情况，这样就会导致某些桶会永远不会存在值，这只是根据这个推断出的。</p><p>​        什么时候转换为红黑树？为什么8的时候树化，4不可以吗？ </p><p>​        这个比较简单，为8的时候，值得注意的时源码里面有这么一段话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">* Because TreeNodes are about twice the size of regular nodes, we</span><br><span class="line">* use them only when bins contain enough nodes to warrant use</span><br><span class="line">* (see TREEIFY_THRESHOLD). And when they become too small (due to</span><br><span class="line">* removal or resizing) they are converted back to plain bins.  In</span><br><span class="line">* usages with well-distributed user hashCodes, tree bins are</span><br><span class="line">* rarely used.  Ideally, under random hashCodes, the frequency of</span><br><span class="line">* nodes in bins follows a Poisson distribution</span><br><span class="line">* (http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Poisson_distribution) with a</span><br><span class="line">* parameter of about 0.5 on average for the default resizing</span><br><span class="line">* threshold of 0.75, although with a large variance because of</span><br><span class="line">* resizing granularity. Ignoring variance, the expected</span><br><span class="line">* occurrences of list size k are (exp(-0.5) * pow(0.5, k) &#x2F;</span><br><span class="line">* factorial(k)). The first values are:</span><br><span class="line">*</span><br><span class="line">* 0:    0.60653066</span><br><span class="line">* 1:    0.30326533</span><br><span class="line">* 2:    0.07581633</span><br><span class="line">* 3:    0.01263606</span><br><span class="line">* 4:    0.00157952</span><br><span class="line">* 5:    0.00015795</span><br><span class="line">* 6:    0.00001316</span><br><span class="line">* 7:    0.00000094</span><br><span class="line">* 8:    0.00000006</span><br><span class="line">* more: less than 1 in ten million</span><br></pre></td></tr></table></figure><p>​        这段话的大致意思，就是由于TreeNodes的大小大约是常规节点的两倍，因此我们仅在容器包含足够的节点以保证使用时才使用它们。当它们变得太小（由于移除或调整大小）时，它们会被转换回普通的垃圾箱。在使用分布良好的用户哈希码时，很少使用树箱。理想情况下，在随机散列码下，bin中节点的频率遵循泊松分布，默认大小调整阈值为0.75时，平均参数约为0.5，但由于大小调整粒度，变化较大。忽略方差，列表大小k的预期出现次数是（exp（-0.5）*pow（0.5，k）/factorial（k）），桶中链表长度大于8的概率为0.00000006，所以正常使用基本不可能出现。</p><p>​        <strong>还有一点值得注意的地方，就是<code>resize</code>方法比较消耗性能，所以在进行初始化HashMap的时候尽量给定初始容量，但是这个初始容量也是稍微需要计算，就是通过（实际用到的大小 / 负载因子）得到初始容量，不然会导致第一次put进行<code>resize</code>，然后多次插入导致map内的节点数大于<code>threshold</code>，导致出现<code>resize</code>threshold。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​        &lt;code&gt;Hashmap&lt;/code&gt;涉及的知识点较多，印象中的&lt;code&gt;Hashmap&lt;/code&gt;非线程安全，集合中的个数小于8时，使用的是数组加链表数据结构，用链表解决hash冲突，java8之后，冲突次数在大于8时，会转化为红黑树（好像当个数小
      
    
    </summary>
    
    
      <category term="集合" scheme="http://yoursite.com/categories/%E9%9B%86%E5%90%88/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>整车任务</title>
    <link href="http://yoursite.com/2019/12/16/%E6%95%B4%E8%BD%A6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/12/16/%E6%95%B4%E8%BD%A6%E4%BB%BB%E5%8A%A1/</id>
    <published>2019-12-16T02:29:26.000Z</published>
    <updated>2020-01-14T06:57:18.051Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 整车任务优化，巴枪端取派任务界面有一个下拉刷新功能，在取货任务下拉刷新时会去调用整车任务接口，获取该司机的整车任务，但是每个司机不一定有整车任务，<br>所以每次调用返回的都为null。  </p><h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><p>&ensp; 更改获取获取整车任务的方式，通过主动调用接口，切换为当司机有整车任务的时候，通过对方发送消息给我们。通过回调我们接口，将其存入Redis，每次只需要查一遍Redis，减少接口调用，优化接口性能。  </p><a id="more"></a>    <h2 id="Redis数据结构"><a href="#Redis数据结构" class="headerlink" title="Redis数据结构"></a>Redis数据结构</h2><p>&ensp; 一个司机有多个整车任务，司机做完一个任务，可以结束当前的整车任务，需要将其移除，下次下拉刷新查询不能有这个任务。key都用司机工号，value有3种数据类型可以考虑，string，list，hash。<br>1.将司机的所有整车任务序列化为json串，作为string类型存入；<br>2.将司机的所有整车任务存入list，作为list类型存入；<br>3.将司机的所有整车任务通过hash类型存入。<br>但是有一点需要注意，如果司机完成了一个任务，需要将其删除，如果用string类型，需要将其查出，反序列化成对象，删除某个任务，再序列化成json串，再次存入。这样操作繁琐，弃用。<br>如果采用list则减少序列化与反序列的操作，也需要查出，再remove某个任务，再存入。这种类型可行，做为备用。<br>最好的方式是采用hash存储，当需要移除某个任务是，直接remove对应的hash key即可。  </p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>&ensp; 使用Spring封装的<code>HashOperations&lt;H, HK, HV&gt;</code>类，操作简单</p><pre><code>RedisTemplate&lt;String, Object&gt; cacheTemplate = SpringUtils.getBean(&quot;redisTemplate&quot;, RedisTemplate.class);  HashOperations&lt;String, String, Object&gt; hashOperations = cacheTemplate.opsForHash   </code></pre><p>首先先获得一个RedisTemplate，再用opsForHash将其转为HashOperations类型。<br>HashOperations中的方法，主要用到的四个方法：<br>put(H key, HK hashKey, HV value)<br>get(H key, Object hashKey)<br>delete(H key, Object… hashKeys)<br>values(H key)  </p><pre><code>hashOperations.put(employeeNumber, taskId, Object)   # cache key：工号, hash key：整车任务id, Object：具体内容。  hashOperations.values(employeeNumber)                # 查询该司机所有的整车任务。  hashOperations.get(employeeNumber, taskId)           # 查询该司机某个整车任务的任务详情。hashOperations.delete(employeeNumber, taskId)        # 删除该司机的某个任务。</code></pre><p>over.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 整车任务优化，巴枪端取派任务界面有一个下拉刷新功能，在取货任务下拉刷新时会去调用整车任务接口，获取该司机的整车任务，但是每个司机不一定有整车任务，&lt;br&gt;所以每次调用返回的都为null。  &lt;/p&gt;
&lt;h2 id=&quot;优化方案&quot;&gt;&lt;a href=&quot;#优化方案&quot; class=&quot;headerlink&quot; title=&quot;优化方案&quot;&gt;&lt;/a&gt;优化方案&lt;/h2&gt;&lt;p&gt;&amp;ensp; 更改获取获取整车任务的方式，通过主动调用接口，切换为当司机有整车任务的时候，通过对方发送消息给我们。通过回调我们接口，将其存入Redis，每次只需要查一遍Redis，减少接口调用，优化接口性能。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="项目经验" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo工具的使用</title>
    <link href="http://yoursite.com/2019/12/11/first/"/>
    <id>http://yoursite.com/2019/12/11/first/</id>
    <published>2019-12-11T06:28:38.000Z</published>
    <updated>2020-01-07T01:42:00.197Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 一直想搭建一个属于自己的博客，终于被我捣鼓出来了。现在虽然没有文章，但是时间还长，慢慢积累吧！  </p><h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean        &#x2F;&#x2F;清除静态页面缓存（清除 public 文件夹)         </span><br><span class="line">$ hexo g            &#x2F;&#x2F;在本地生成静态页面（生成 public 文件夹）        </span><br><span class="line">$ hexo s            &#x2F;&#x2F;启动本地服务 http:&#x2F;&#x2F;localhost:4000，进行预览调试           </span><br><span class="line">$ hexo d            &#x2F;&#x2F;远程部署，同步到 GitHub</span><br></pre></td></tr></table></figure><p>&ensp; hexo g 是 hexo generate的简写，由此可知hexo s -&gt; hexo server，hexo d -&gt; hexo deploy  </p><a id="more"></a>    <h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>&ensp; 在搭建好hexo后，自带的默认主题<code>landscape</code>。想要符合自己风格的主题可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题</a>下载<br>&ensp; 下载之后将主题放在<code>themes</code>下面，然后在<code>_config.yml</code>文件中进行修改，重新部署到服务器之后生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: ayer</span><br></pre></td></tr></table></figure><h2 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post name</span><br></pre></td></tr></table></figure><h2 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h2><pre><code>*这是斜体* 或 _这也是斜体_ **这是粗体*****这是加粗斜体***~~这是删除线~~</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 一直想搭建一个属于自己的博客，终于被我捣鼓出来了。现在虽然没有文章，但是时间还长，慢慢积累吧！  &lt;/p&gt;
&lt;h2 id=&quot;hexo常用命令&quot;&gt;&lt;a href=&quot;#hexo常用命令&quot; class=&quot;headerlink&quot; title=&quot;hexo常用命令&quot;&gt;&lt;/a&gt;hexo常用命令&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo clean        &amp;#x2F;&amp;#x2F;清除静态页面缓存（清除 public 文件夹)         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo g            &amp;#x2F;&amp;#x2F;在本地生成静态页面（生成 public 文件夹）        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo s            &amp;#x2F;&amp;#x2F;启动本地服务 http:&amp;#x2F;&amp;#x2F;localhost:4000，进行预览调试           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo d            &amp;#x2F;&amp;#x2F;远程部署，同步到 GitHub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;ensp; hexo g 是 hexo generate的简写，由此可知hexo s -&amp;gt; hexo server，hexo d -&amp;gt; hexo deploy  &lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
