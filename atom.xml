<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zdzhong</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-09T07:53:44.470Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zdzhong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>红黑树</title>
    <link href="http://yoursite.com/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://yoursite.com/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/</id>
    <published>2020-01-07T01:26:56.000Z</published>
    <updated>2020-01-09T07:53:44.470Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 一说到数据结构就头疼，可是面试官爱问呀！没办法，来吧！<br>记忆中的红黑树，由红黑节点组成的一颗树（二叉树？），没了，什么都不记得了！</p><p>&ensp; 首先红黑树是在平衡二叉排序树的基础上进修扩展的，所以需要掌握二叉排序树。  </p><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><p>&ensp; 二叉排序树是一颗二叉树，对于树的每个节点是这样定义的：<br><strong>1.若左子树不为空，则左子树的所有节点均小于根节点的值</strong><br><strong>2.若右子树部位空，则右子树的所有节点均大于根节点的值</strong><br><strong>3.左，右子树分别也是二叉排序树</strong>  </p><a id="more"></a><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>&ensp; 普通的二叉排序树存在极不平衡的情况，导致整棵树的深度非常深，使得二叉排序树的时间复杂度退化成O(n)。<br>&ensp; 平衡二叉树的定义：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。<br>&ensp; 解决这种情况的做法，在往一棵树中插入一个新的节点时，如果二叉树的左右高度超过1时，进行左旋、右旋、先右旋再左旋、先左旋再右旋。  </p><p><strong>右旋</strong><br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/right.png" alt="右旋">  </p><p><strong>左旋</strong><br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/left.png" alt="右旋">  </p><p><strong>先右旋再左旋</strong><br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/right_left.png" alt="先右旋再左旋">  </p><p><strong>先左旋再右旋</strong><br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/left_right.png" alt="先左旋再右旋">  </p><p>这里举例是结合了二叉排序树和平衡二叉树，接下来就轮到的红黑树。  </p><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p>&ensp; 红黑树的特性：<br><strong>1.每个节点要么是黑色，要么是红色。</strong><br><strong>2.根节点是黑色。</strong><br><strong>3.每个叶子节点（null）是黑色。</strong><br><strong>4.每个红色结点的两个子结点一定都是黑色。</strong><br><strong>5.任意一结点到每个叶子结点的路径都包含数量相同的黑结点。</strong><br>&ensp; 所有的叶子节点都为null。红黑树有这么多的特性，如果对某个红黑树进行插入或者删除，是如何达到这种平衡呢？那就是来自红黑树的自平衡，红黑树之所以很难，就是每次插入或者删除操作都会打破这种平衡。  </p><p><strong>插入</strong><br>&ensp; 每次插入操作之前都需要查找，需要插入的位置。对于查找算法，如下：<br><strong>1.从根结点开始查找</strong><br><strong>2.若根结点为空，那么插入结点作为根结点，结束</strong><br><strong>3.若根结点不为空，那么把根结点作为当前结点</strong><br><strong>4.若当前结点为null，返回当前结点的父结点，结束</strong><br><strong>5.若当前结点key等于查找key，那么该key所在结点就是插入结点，更新结点的值，结束</strong><br><strong>6.若当前结点key大于查找key，把当前结点的左子结点设置为当前结点，重复步骤4</strong><br><strong>7.若当前结点key小于查找key，把当前结点的右子结点设置为当前结点，重复步骤4</strong><br>所有的叶子节点都是null节点，所以一定能找到插入位置。<br>&ensp; 假设当前的节点为节点1，有如下的约定：<br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/appointment01.png" alt><br>&ensp; 假设插入一个元素，那么有个问题，这个节点的颜色是啥？假设为黑色，那么每次插入的时候，该节点所在的路径上的黑色总会多一个，就需要进行自平衡。如果每次插入节点的颜色为红色，这样就存在插入后就已经达到了黑色平衡。所以每次插入的节点颜色为红色。<br>&ensp; 每次插入的情况有如下几种，如图：<br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/insert01.png" alt><br>&ensp; 插入操作情况存在这么多种，但是都左右对称。  </p><p><strong>删除</strong><br>&ensp; 接下来轮到删除了，删除操作就是查找对应的key，将该key对应的节点进行移除，但删除节点的位子需要有人顶替，所以在替换时对于替换的节点颜色和删除节点的位置进行分析。值得注意的是，如果删除的节点无子节点，直接删除即可。如果有一个子节点，用子结点替换删除结点。若删除结点有两个子结点，用后继结点（大于删除结点的最小结点）替换删除结点，也就是删除节点的右子树种最左结点。那么可以拿前继结点（删除结点的左子树最左结点）替代吗？可以的。但习惯上大多都是拿后继结点来替代。<br>&ensp; 每次删除的情况有如下几种，如图：<br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/delete01.png" alt> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 一说到数据结构就头疼，可是面试官爱问呀！没办法，来吧！&lt;br&gt;记忆中的红黑树，由红黑节点组成的一颗树（二叉树？），没了，什么都不记得了！&lt;/p&gt;
&lt;p&gt;&amp;ensp; 首先红黑树是在平衡二叉排序树的基础上进修扩展的，所以需要掌握二叉排序树。  &lt;/p&gt;
&lt;h3 id=&quot;二叉排序树&quot;&gt;&lt;a href=&quot;#二叉排序树&quot; class=&quot;headerlink&quot; title=&quot;二叉排序树&quot;&gt;&lt;/a&gt;二叉排序树&lt;/h3&gt;&lt;p&gt;&amp;ensp; 二叉排序树是一颗二叉树，对于树的每个节点是这样定义的：&lt;br&gt;&lt;strong&gt;1.若左子树不为空，则左子树的所有节点均小于根节点的值&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2.若右子树部位空，则右子树的所有节点均大于根节点的值&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;3.左，右子树分别也是二叉排序树&lt;/strong&gt;  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>每天几道java面试题-1</title>
    <link href="http://yoursite.com/2020/01/06/%E6%AF%8F%E5%A4%A9%E5%87%A0%E9%81%93java%E9%9D%A2%E8%AF%95%E9%A2%98-1/"/>
    <id>http://yoursite.com/2020/01/06/%E6%AF%8F%E5%A4%A9%E5%87%A0%E9%81%93java%E9%9D%A2%E8%AF%95%E9%A2%98-1/</id>
    <published>2020-01-06T09:46:53.000Z</published>
    <updated>2020-01-07T09:19:36.889Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 所有的java面试题来源知乎的一篇<a href="https://zhuanlan.zhihu.com/p/86536581" target="_blank" rel="noopener">面试清单（Java岗）</a>，从2020年1月6号开始，以每天一篇java文章进步，想到啥写啥！  </p><h1 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h1><h2 id="1-Hashmap-源码及掌握"><a href="#1-Hashmap-源码及掌握" class="headerlink" title="1.Hashmap 源码及掌握"></a>1.Hashmap 源码及掌握</h2><p>&ensp; <code>Hashmap</code>涉及的知识点较多，第一道题难道想要将我要进步的心扼杀在萌芽之中？<br>诶！万事开头难，慢慢啃吧！</p><a id="more"></a><p>&ensp; 印象中的<code>Hashmap</code>非线程安全，集合中的个数小于8时，使用的是数组加链表数据结构，用链表解决hash冲突，java8之后，冲突次数在大于8时，会转化为红黑树（好像当个数小于6个时，由红黑树转为链表）。  </p><p>&ensp; 其中扩容是有一个负载因子控制，默认为0.75，当<code>集合中的个数 &gt; 容量 * 负载因子</code> 时，会进行扩容，扩容之后的容量是之前的2倍。  </p><p>&ensp; 哈希算法忘记了，哈希冲突好像是如果通过哈希算法得到的该节点上有元素时，放在该节点的下个节点，如果也有元素时，继续下一个。</p><p>由此引出的知识点：1.什么时红黑树 2.为什么是红黑树，别的树不可以吗？ 3.为什么8的时候树化，4不可以吗？  </p><p>通过源码验证上面描述是否准确，以及分析问题。  </p><h3 id="1-1-Hashmap的属性"><a href="#1-1-Hashmap的属性" class="headerlink" title="1.1 Hashmap的属性"></a>1.1 Hashmap的属性</h3><pre><code>static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;     # 默认容量大小16（这个竟然忘记了）  static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;            # 最大容量2的30次方  static final float DEFAULT_LOAD_FACTOR = 0.75f;         # 默认的负载因子  static final int TREEIFY_THRESHOLD = 8;  # 转换为红黑树的门槛  static final int UNTREEIFY_THRESHOLD = 6;  # 由红黑树转换为链表的门槛  static final int MIN_TREEIFY_CAPACITY = 64;# 在转变成树之前，还会有一次判断，只有键值对数量大于 64 才会发生转换。（竟然还有这个判断）  # 这是为了避免在哈希表建立初期，多个键值对恰好被放入了同一个链表中而导致不必要的转化。  # 且该值不能小于4 * TREEIFY_THRESHOLD  </code></pre><h3 id="1-2-Hashmap的主要方法"><a href="#1-2-Hashmap的主要方法" class="headerlink" title="1.2 Hashmap的主要方法"></a>1.2 Hashmap的主要方法</h3><p>来了，来了，他来了，他带着hash算法来了。</p><pre><code>static final int hash(Object key) {        int h;        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);    }</code></pre><p>刚刚百度了一下Java中<code>^</code>运算符，这是一个异或运算（我是个菜鸡）<br>不用说这个<code>&gt;&gt;&gt;</code>我也不会，是时候总结一下了</p><pre><code>&gt;&gt;右移运算符，num &gt;&gt; 1,相当于num除以2。 按二进制形式把所有的数字向右移动对应位数，低位移出（舍弃），高位的空位补符号位，即正数补零，负数补1。符号位不变。所以-1 &gt;&gt; 2，还是等于-1，无论右移多少位都为-1  &gt;&gt;&gt; 二进制右移补零操作符，左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充-1 &gt;&gt;&gt; 2，1073741823</code></pre><p>这就有一个问题-1 &gt;&gt; 2，无论右移多少位都是-1，那么左移呢？通过测试得，左移无论是正数还是负数都是低位补0，-1 &lt;&lt; 1，-2。  </p><p>回归正题，hash算法，通过获取key的hashCode，再和key的hashCode无符号右移16位进行异或。<br>百度了一下其中的奥秘，现在还看不懂，先mark一下<a href="https://www.cnblogs.com/zxporz/p/11204233.html" target="_blank" rel="noopener">HashMap中的hash算法中的几个疑问</a>  </p><p>轮到了put方法：</p><pre><code>public V put(K key, V value) {        return putVal(hash(key), key, value, false, true);    }final V putVal(int hash, K key, V value, boolean onlyIfAbsent,                   boolean evict) {        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;        if ((tab = table) == null || (n = tab.length) == 0)            n = (tab = resize()).length;        if ((p = tab[i = (n - 1) &amp; hash]) == null)            tab[i] = newNode(hash, key, value, null);        else {            Node&lt;K,V&gt; e; K k;            if (p.hash == hash &amp;&amp;                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))                e = p;            else if (p instanceof TreeNode)                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);            else {                for (int binCount = 0; ; ++binCount) {                    if ((e = p.next) == null) {                        p.next = newNode(hash, key, value, null);                        if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st                            treeifyBin(tab, hash);                        break;                    }                    if (e.hash == hash &amp;&amp;                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))                        break;                    p = e;                }            }            if (e != null) { // existing mapping for key                V oldValue = e.value;                if (!onlyIfAbsent || oldValue == null)                    e.value = value;                afterNodeAccess(e);                return oldValue;            }        }        ++modCount;        if (++size &gt; threshold)            resize();        afterNodeInsertion(evict);        return null;    }</code></pre><p>哇，一个put方法就这么多（要不放弃吧！），慢慢来吧！<br>首先put方法中调用的putVal这个方法。<br>putVal方法中，先把<code>table</code>赋值给tab，<code>tab.length</code>赋值给n，如果<code>table</code>为null或者<code>tab.length</code>等于0，则进行扩容。<br>调用resize方法，扩容方法等下分析。继续，resize之后获得一个新的<code>Node</code>数组，判断i = (n - 1) &amp; hash数组索引为i处的Node是否有值，<br>如果没有值，则将键值对放在tab[i]处。<br>如果此处有值，则判断key是否存在<code>table</code>中，如果存在，则替换之前的值，如果不存在，则这个节点的拿下一个节点继续做判断。<br>其中有两点，第一点，如果当前节点的为红黑树数据结构，则新加入的节点会转为红黑树数据结构。<br>第二点，如果冲突的节点数已经达到8个，看是否需要改变冲突节点的存储结构，首先判断当前hashMap的容量，<br>如果不足64，只进行resize，扩容table，如果达到64，那么将冲突的存储结构为红黑树。  </p><pre><code>final Node&lt;K,V&gt;[] resize() {        Node&lt;K,V&gt;[] oldTab = table;        int oldCap = (oldTab == null) ? 0 : oldTab.length;        int oldThr = threshold;        int newCap, newThr = 0;        if (oldCap &gt; 0) {            if (oldCap &gt;= MAXIMUM_CAPACITY) {                threshold = Integer.MAX_VALUE;                return oldTab;            }            else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)                newThr = oldThr &lt;&lt; 1; // double threshold        }        else if (oldThr &gt; 0) // initial capacity was placed in threshold            newCap = oldThr;        else {               // zero initial threshold signifies using defaults            newCap = DEFAULT_INITIAL_CAPACITY;            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);        }        if (newThr == 0) {            float ft = (float)newCap * loadFactor;            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?                      (int)ft : Integer.MAX_VALUE);        }        threshold = newThr;        @SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;})            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];        table = newTab;        if (oldTab != null) {            for (int j = 0; j &lt; oldCap; ++j) {                Node&lt;K,V&gt; e;                if ((e = oldTab[j]) != null) {                    oldTab[j] = null;                    if (e.next == null)                        newTab[e.hash &amp; (newCap - 1)] = e;                    else if (e instanceof TreeNode)                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);                    else { // preserve order                        Node&lt;K,V&gt; loHead = null, loTail = null;                        Node&lt;K,V&gt; hiHead = null, hiTail = null;                        Node&lt;K,V&gt; next;                        do {                            next = e.next;                            if ((e.hash &amp; oldCap) == 0) {                                if (loTail == null)                                    loHead = e;                                else                                    loTail.next = e;                                loTail = e;                            }                            else {                                if (hiTail == null)                                    hiHead = e;                                else                                    hiTail.next = e;                                hiTail = e;                            }                        } while ((e = next) != null);                        if (loTail != null) {                            loTail.next = null;                            newTab[j] = loHead;                        }                        if (hiTail != null) {                            hiTail.next = null;                            newTab[j + oldCap] = hiHead;                        }                    }                }            }        }        return newTab;    }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 所有的java面试题来源知乎的一篇&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86536581&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面试清单（Java岗）&lt;/a&gt;，从2020年1月6号开始，以每天一篇java文章进步，想到啥写啥！  &lt;/p&gt;
&lt;h1 id=&quot;Java-基础&quot;&gt;&lt;a href=&quot;#Java-基础&quot; class=&quot;headerlink&quot; title=&quot;Java 基础&quot;&gt;&lt;/a&gt;Java 基础&lt;/h1&gt;&lt;h2 id=&quot;1-Hashmap-源码及掌握&quot;&gt;&lt;a href=&quot;#1-Hashmap-源码及掌握&quot; class=&quot;headerlink&quot; title=&quot;1.Hashmap 源码及掌握&quot;&gt;&lt;/a&gt;1.Hashmap 源码及掌握&lt;/h2&gt;&lt;p&gt;&amp;ensp; &lt;code&gt;Hashmap&lt;/code&gt;涉及的知识点较多，第一道题难道想要将我要进步的心扼杀在萌芽之中？&lt;br&gt;诶！万事开头难，慢慢啃吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="java面试题" scheme="http://yoursite.com/categories/java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>整车任务</title>
    <link href="http://yoursite.com/2019/12/16/%E6%95%B4%E8%BD%A6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/12/16/%E6%95%B4%E8%BD%A6%E4%BB%BB%E5%8A%A1/</id>
    <published>2019-12-16T02:29:26.000Z</published>
    <updated>2020-01-06T04:10:05.246Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 整车任务优化，巴枪端取派任务界面有一个下拉刷新功能，在取货任务下拉刷新时会去调用整车任务接口，获取该司机的整车任务，但是每个司机不一定有整车任务，<br>所以每次调用返回的都为null。  </p><h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><p>&ensp; 更改获取获取整车任务的方式，通过主动调用接口，切换为当司机有整车任务的时候，通过对方发送消息给我们。通过回调我们接口，将其存入Redis，每次只需要查一遍Redis，减少接口调用，优化接口性能。  </p><a id="more"></a>    <h2 id="Redis数据结构"><a href="#Redis数据结构" class="headerlink" title="Redis数据结构"></a>Redis数据结构</h2><p>&ensp; 一个司机有多个整车任务，司机做完一个任务，可以结束当前的整车任务，需要将其移除，下次下拉刷新查询不能有这个任务。key都用司机工号，value有3种数据类型可以考虑，string，list，hash。<br>1.将司机的所有整车任务序列化为json串，作为string类型存入；<br>2.将司机的所有整车任务存入list，作为list类型存入；<br>3.将司机的所有整车任务通过hash类型存入。<br>但是有一点需要注意，如果司机完成了一个任务，需要将其删除，如果用string类型，需要将其查出，反序列化成对象，删除某个任务，再序列化成json串，再次存入。这样操作繁琐，弃用。<br>如果采用list则减少序列化与反序列的操作，也需要查出，再remove某个任务，再存入。这种类型可行，做为备用。<br>最好的方式是采用hash存储，当需要移除某个任务是，直接remove对应的hash key即可。  </p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>&ensp; 使用Spring封装的<code>HashOperations&lt;H, HK, HV&gt;</code>类，操作简单</p><pre><code>RedisTemplate&lt;String, Object&gt; cacheTemplate = SpringUtils.getBean(&quot;redisTemplate&quot;, RedisTemplate.class);  HashOperations&lt;String, String, Object&gt; hashOperations = cacheTemplate.opsForHash   </code></pre><p>首先先获得一个RedisTemplate，再用opsForHash将其转为HashOperations类型。<br>HashOperations中的方法，主要用到的四个方法：<br>put(H key, HK hashKey, HV value)<br>get(H key, Object hashKey)<br>delete(H key, Object… hashKeys)<br>values(H key)  </p><pre><code>hashOperations.put(employeeNumber, taskId, Object)   # cache key：工号, hash key：整车任务id, Object：具体内容。  hashOperations.values(employeeNumber)                # 查询该司机所有的整车任务。  hashOperations.get(employeeNumber, taskId)           # 查询该司机某个整车任务的任务详情。hashOperations.delete(employeeNumber, taskId)        # 删除该司机的某个任务。</code></pre><p>over.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 整车任务优化，巴枪端取派任务界面有一个下拉刷新功能，在取货任务下拉刷新时会去调用整车任务接口，获取该司机的整车任务，但是每个司机不一定有整车任务，&lt;br&gt;所以每次调用返回的都为null。  &lt;/p&gt;
&lt;h2 id=&quot;优化方案&quot;&gt;&lt;a href=&quot;#优化方案&quot; class=&quot;headerlink&quot; title=&quot;优化方案&quot;&gt;&lt;/a&gt;优化方案&lt;/h2&gt;&lt;p&gt;&amp;ensp; 更改获取获取整车任务的方式，通过主动调用接口，切换为当司机有整车任务的时候，通过对方发送消息给我们。通过回调我们接口，将其存入Redis，每次只需要查一遍Redis，减少接口调用，优化接口性能。  &lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hexo工具的使用</title>
    <link href="http://yoursite.com/2019/12/11/first/"/>
    <id>http://yoursite.com/2019/12/11/first/</id>
    <published>2019-12-11T06:28:38.000Z</published>
    <updated>2020-01-07T01:42:00.197Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 一直想搭建一个属于自己的博客，终于被我捣鼓出来了。现在虽然没有文章，但是时间还长，慢慢积累吧！  </p><h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean        &#x2F;&#x2F;清除静态页面缓存（清除 public 文件夹)         </span><br><span class="line">$ hexo g            &#x2F;&#x2F;在本地生成静态页面（生成 public 文件夹）        </span><br><span class="line">$ hexo s            &#x2F;&#x2F;启动本地服务 http:&#x2F;&#x2F;localhost:4000，进行预览调试           </span><br><span class="line">$ hexo d            &#x2F;&#x2F;远程部署，同步到 GitHub</span><br></pre></td></tr></table></figure><p>&ensp; hexo g 是 hexo generate的简写，由此可知hexo s -&gt; hexo server，hexo d -&gt; hexo deploy  </p><a id="more"></a>    <h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>&ensp; 在搭建好hexo后，自带的默认主题<code>landscape</code>。想要符合自己风格的主题可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题</a>下载<br>&ensp; 下载之后将主题放在<code>themes</code>下面，然后在<code>_config.yml</code>文件中进行修改，重新部署到服务器之后生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: ayer</span><br></pre></td></tr></table></figure><h2 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post name</span><br></pre></td></tr></table></figure><h2 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h2><pre><code>*这是斜体* 或 _这也是斜体_ **这是粗体*****这是加粗斜体***~~这是删除线~~</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 一直想搭建一个属于自己的博客，终于被我捣鼓出来了。现在虽然没有文章，但是时间还长，慢慢积累吧！  &lt;/p&gt;
&lt;h2 id=&quot;hexo常用命令&quot;&gt;&lt;a href=&quot;#hexo常用命令&quot; class=&quot;headerlink&quot; title=&quot;hexo常用命令&quot;&gt;&lt;/a&gt;hexo常用命令&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo clean        &amp;#x2F;&amp;#x2F;清除静态页面缓存（清除 public 文件夹)         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo g            &amp;#x2F;&amp;#x2F;在本地生成静态页面（生成 public 文件夹）        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo s            &amp;#x2F;&amp;#x2F;启动本地服务 http:&amp;#x2F;&amp;#x2F;localhost:4000，进行预览调试           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo d            &amp;#x2F;&amp;#x2F;远程部署，同步到 GitHub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;ensp; hexo g 是 hexo generate的简写，由此可知hexo s -&amp;gt; hexo server，hexo d -&amp;gt; hexo deploy  &lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
