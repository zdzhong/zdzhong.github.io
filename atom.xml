<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zdzhong</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-03T04:35:05.371Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zdzhong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud 从入门到放弃(一)</title>
    <link href="http://yoursite.com/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/"/>
    <id>http://yoursite.com/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/</id>
    <published>2020-02-29T07:29:28.000Z</published>
    <updated>2020-03-03T04:35:05.371Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。 ——来源<a href="https://baike.baidu.com/item/spring%20cloud/20269825?fr=aladdin" target="_blank" rel="noopener">百度百科</a>  </p><a id="more"></a>  <h3 id="Spring-Cloud简介"><a href="#Spring-Cloud简介" class="headerlink" title="Spring Cloud简介"></a>Spring Cloud简介</h3><p>&ensp; 为什么使用SpringCloud？从微服务的角度而言：就是把一个大的项目，分解成多个小的模块。这些小的模块组合起来，完成功能。而微服务在这个基础上要更彻底地去耦合。</p><p>&ensp; Spring Cloud主要集成的框架：  </p><p>1.Spring Cloud Eureka（服务治理）  </p><p>2.Spring Cloud Ribbon（客户端负载均衡）  </p><p>3.Spring Cloud Hystrix（服务容错保护）  </p><p>4.Spring Cloud Feign（声明式服务调用）  </p><p>5.Spring Cloud Zuul（API网关服务）  </p><p>6.Spring Cloud Config（分布式配置中心）  </p><p>7.Spring Cloud Bus（消息总线）  </p><p>8.Spring Cloud Stream（消息驱动的微服务）  </p><p>9.Spring Cloud Sleuth（分布式服务跟踪）  </p><h3 id="Spring-Cloud-Eureka-服务治理"><a href="#Spring-Cloud-Eureka-服务治理" class="headerlink" title="Spring Cloud Eureka 服务治理"></a>Spring Cloud Eureka 服务治理</h3><p>&ensp; 如果在未使用微服务的系统，在调用其他服务下面的接口时，只有通过ip地址+端口号+接口名的形式去显示调用需要用的接口。这样会导致在ip更换的情况下，需要修改各服务的ip，而现实中ip也存在变更的情况。那么Eureka的作用就体现出来了，不需要去通过这种显示调用其他服务的接口，只需要创建一个新的微服务作为<code>Eureka server</code>，其他服务注册到改<code>Eureka Server</code>服务上，然后其他微服务通过<code>Eureka Server</code>获取服务名就可以调用，而一般服务名不会去修改。  </p><p>&ensp; 假设现在又两个微服务分别为：微服务A、微服务B，A需要调用B获取数据，那如何才能通过微服务调用呢？需要创建一个Eureka Server服务器E，将所有的微服务都注册在E上，E服务维护这些已经注册进来的信息，然后E会生成一个注册清单。其他微服务都可以获取这个注册清单。  </p><p>&ensp; 所以Eureka分为两个部分，一个是收集所有的注册信息的一端称为<code>Eureka server</code>端，而发送自己的信息给到<code>Eureka server</code>端的或者，获取注册清单的，这两部分称之为<code>Eureka client端</code>。而<code>Eureka client</code>分为两个方面，一个方面叫做<strong>服务提供者</strong>，还有一个叫做<strong>服务消费者</strong>。所谓的服务提供者就是将本身的服务名以及一些元数据发送给<code>Eureka server</code>端，这就叫服务提供者，而从<code>Eureka server</code>端获取注册清单的称为服务消费者。一个微服务可以作为服务提供者也可以作为服务消费者，可以同时担任两种角色，这两种角色并不互斥。  </p><p><img src="/2020/02/29/Spring-Cloud-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/Eureka01.png" alt="Eureka01">  </p><p>&ensp; 由上图可知，微服务A和微服务B将其自己的相关信息注册到<code>Eureka server</code>服务上面，也可以获取<code>Eureka server</code>上获取注册清单，所以微服务A和微服务B即作为服务提供者，也作为服务消费者，而微服务C和微服务D只从<code>Eureka server</code>上面获取了注册清单，所以微服务C和微服务D只作为服务消费者。  </p><h4 id="Eureka的治理机制"><a href="#Eureka的治理机制" class="headerlink" title="Eureka的治理机制"></a>Eureka的治理机制</h4><p>&ensp; 可以通过对角色进行划分Eureka的治理机制：服务提供者、服务消费者、Eureka server（服务注册中心），可以通过角色定位分析Eureka的治理机制。  </p><p>&ensp; <strong>服务提供者</strong>  </p><p>&emsp; <font color="red">服务注册</font> ：在服务启动的时候会通过发送REST请求的方式将自己注册到Eureka Server上，同时带上了自己的IP和端口以及相关信息；  </p><p>&emsp; <font color="red">服务续约</font> ：在注册服务成功之后，服务提供者会维护一个心跳用来持续告诉Eureka Server，默认是30秒一次请求；  </p><p>&emsp; <font color="red">服务下线</font> ：当服务提供者关闭时会向Eureka server发送消息，把自己从服务列表中删除。防止服务消费者调用到不存在的服务。</p><p>&ensp; <strong>服务消费者</strong>  </p><p>&emsp; <font color="red">获取服务注册列表</font> ：当服务消费者启动时，会发送一个REST请求给服务注册中心，来获取上面注册的服务清单；</p><p>&emsp; <font color="red">服务调用</font> ：服务消费者在获取服务清单后，通过服务名可以获得具体提供服务相关接口，完成服务的远程调用；</p><p>&ensp; <strong>Eureka server（服务注册中心）</strong>  </p><p>&emsp; <font color="red">失效剔除</font> ：默认每隔一段时间（默认为60秒） 将当前清单中超时（默认为90秒）没有续约的服务剔除出去；</p><p>&emsp; <font color="red">服务调用</font> ：Eureka server在运行期间，会统计心跳失败的比例在15分钟之内是否低于85%。 Eureka server会将当前的实例注册信息保护起来，让这些实例不会过期，尽可能保护这些注册信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。 ——来源&lt;a href=&quot;https://baike.baidu.com/item/spring%20cloud/20269825?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度百科&lt;/a&gt;  &lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="http://yoursite.com/categories/Spring-Cloud/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Redis从入门到放弃(1)</title>
    <link href="http://yoursite.com/2020/02/27/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-1/"/>
    <id>http://yoursite.com/2020/02/27/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-1/</id>
    <published>2020-02-27T03:08:11.000Z</published>
    <updated>2020-02-29T07:30:42.066Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; Redis（全称：Remote Dictionary Server 远程字典服务）是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。——来源<a href="https://baike.baidu.com/item/Redis/6549233?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p><h2 id="1-Redis-简单介绍"><a href="#1-Redis-简单介绍" class="headerlink" title="1.Redis 简单介绍"></a>1.Redis 简单介绍</h2><p>&ensp; Redis是一个开源的，基于内存的数据结构存储，可用作于<strong>数据库、缓存、消息中间件</strong>，以及和token结合实现接口幂等性校验。<br>&ensp; Redis是基于内存，常用作于缓存的一种技术，并且Redis存储的方式是以key-value的形式。这和Java中的Map集合非常相似，但是这两者之间有什么不同呢？  </p><pre><code>Java实现的Map是本地缓存，如果有多台实例(机器)的话，每个实例都需要各自保存一份缓存，缓存不具有一致性。Redis实现的是分布式缓存，如果有多台实例(机器)的话，每个实例都共享一份缓存，缓存具有一致性。Java实现的Map不是专业做缓存的，JVM内存太大容易挂掉的。一般用做于容器来存储临时数据，缓存的数据随着JVM销毁而结束。Map所存储的数据结构，缓存过期机制等等是需要程序员自己手写的。Redis是专业做缓存的，可以用几十个G内存来做缓存。Redis一般用作于缓存，可以将缓存数据保存在硬盘中，Redis重启了后可以将其恢复。原生提供丰富的数据结构、缓存过期机制等等简单好用的功能。</code></pre><h2 id="2-Redis-数据结构"><a href="#2-Redis-数据结构" class="headerlink" title="2.Redis 数据结构"></a>2.Redis 数据结构</h2><p>&ensp; Redis以Key-Value形式存储，那么key对应的数据结构是字符串类型存储，但是value的数据结构就比较多，分别有：string、list、hash、set、sortset。 </p><p>&ensp; Redis由C语言编写，值得注意的是：Redis并没有直接使用C语言的这些数据结构来实现key-value数据库，而是基于这些数据结构创建了一个对象（结构体）系统。简单来说：Redis使用对象来表示数据库中的键和值。每次我们在Redis数据库中新创建一个键值对时，至少会创建出两个对象。一个是键对象，一个是值对象。   </p><p>&ensp; Redis中的key使用的字符串类型跟C语言中的字符串不同，使用的是简单动态字符串（Simple dynamic string,SDS）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp; Redis（全称：Remote Dictionary Server 远程字典服务）是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由V
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>find bugs插件问题总结</title>
    <link href="http://yoursite.com/2020/01/14/find-bugs%E6%8F%92%E4%BB%B6%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/01/14/find-bugs%E6%8F%92%E4%BB%B6%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2020-01-14T06:56:47.000Z</published>
    <updated>2020-01-14T08:23:56.192Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 总结项目中遇到的各种bug，长期更新。使用idea一定要安装一个阿里巴巴的find bugs插件，可以减少代码的bug，以及提升系统性能。  </p><p>&ensp; Findbugs是一个静态分析工具，它检查类或者JAR 文件，将字节码与一组缺陷模式进行对比以发现可能的问题。Findbugs自带检测器，其中有60余种Bad practice，80余种Correctness，1种 Internationalization，12种Malicious code vulnerability，27种Multithreaded correctness，23种Performance，43种Dodgy。  </p><a id="more"></a>  <p>&ensp; <code>Bad practice</code>:坏的实践，<code>Correctness</code>:可能导致错误的代码，<code>Performance</code>:性能问题，<code>Dodgy</code>:具有潜在危险的代码等等…</p><h4 id="1-Inefficient-use-of-keySet-iterator-instead-of-entrySet-iterator"><a href="#1-Inefficient-use-of-keySet-iterator-instead-of-entrySet-iterator" class="headerlink" title="1.Inefficient use of keySet iterator instead of entrySet iterator."></a>1.Inefficient use of keySet iterator instead of entrySet iterator.</h4><p>在进行迭代map对象时，使用的时map.keySet()，建议使用entrySet。<br><strong>原代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; init map</span><br><span class="line"></span><br><span class="line">for (String key : map.keySet()) &#123;</span><br><span class="line">&#x2F;&#x2F; 取出key对应的value</span><br><span class="line">Object obj &#x3D; map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>建议修正后代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; init map</span><br><span class="line"></span><br><span class="line">for (Map.Entry&lt;String, Object&gt; entry : map.entrySet())&#123;</span><br><span class="line">&#x2F;&#x2F; 获取key</span><br><span class="line">String key &#x3D; entry.getKey();</span><br><span class="line">&#x2F;&#x2F; 获取对应value</span><br><span class="line">Object obj &#x3D; entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用keySet迭代器是低效地，用entrySet迭代器会更高效，entrySet迭代器 : keySet迭代器大致是1.5 : 1。  </p><h4 id="2-Boxed-value-is-unboxed-and-then-immediately-reboxed"><a href="#2-Boxed-value-is-unboxed-and-then-immediately-reboxed" class="headerlink" title="2.Boxed value is unboxed and then immediately reboxed."></a>2.Boxed value is unboxed and then immediately reboxed.</h4><p>装箱后的值先拆箱，然后立即重新装箱。<br><strong>原代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User user &#x3D; new User();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; User存在一个Integer类型的age。</span><br><span class="line"></span><br><span class="line">Integer age &#x3D; user.getAge();</span><br><span class="line">&#x2F;&#x2F; 如果age为null，则将其设置为0.</span><br><span class="line">age &#x3D; age &#x3D;&#x3D; null ? 0 : age;</span><br></pre></td></tr></table></figure><p>此问题在于age不为null时，会被拆箱，赋值时再装箱。这是自动装箱拆箱的特性，只要运算中有不同类型，当涉及到类型转换时，编译器就会向下转型，再进行运算。  </p><p><strong>建议修正后代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age &#x3D; age &#x3D;&#x3D; null ? Integer.valueOf(0) : age;</span><br></pre></td></tr></table></figure><h4 id="3-Null-pointer-dereference"><a href="#3-Null-pointer-dereference" class="headerlink" title="3.Null pointer dereference"></a>3.Null pointer dereference</h4><p>这里泛指空指针错误，遇到不同类型的都会在这个下面进行记录。  </p><h5 id="3-1-Unboxing-of-‘xxx’-may-produce-‘java-lang-NullPointerException’-这个问题是项目开发中遇到的！"><a href="#3-1-Unboxing-of-‘xxx’-may-produce-‘java-lang-NullPointerException’-这个问题是项目开发中遇到的！" class="headerlink" title="3.1 Unboxing of ‘xxx’ may produce ‘java.lang.NullPointerException’(这个问题是项目开发中遇到的！)"></a>3.1 Unboxing of ‘xxx’ may produce ‘java.lang.NullPointerException’(这个问题是项目开发中遇到的！)</h5><p>这个空指针当时可耗费我很多时间去找，为何这一行代码会报空指针呢？上代码：<br><strong>原代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">User user &#x3D; new User();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; User存在一个Integer类型的age。</span><br><span class="line"></span><br><span class="line">if(null !&#x3D; user)&#123;</span><br><span class="line">&#x2F;&#x2F; 这一行报NPE</span><br><span class="line">int age &#x3D; user.getAge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当时我震惊了，这个为啥会报NPE呢？问题就出现在Integer类型在向下转型的时候报的。user.getAge()为null，在向下转型时，null不能转为基本数据类型，所以报NPE。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 总结项目中遇到的各种bug，长期更新。使用idea一定要安装一个阿里巴巴的find bugs插件，可以减少代码的bug，以及提升系统性能。  &lt;/p&gt;
&lt;p&gt;&amp;ensp; Findbugs是一个静态分析工具，它检查类或者JAR 文件，将字节码与一组缺陷模式进行对比以发现可能的问题。Findbugs自带检测器，其中有60余种Bad practice，80余种Correctness，1种 Internationalization，12种Malicious code vulnerability，27种Multithreaded correctness，23种Performance，43种Dodgy。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="代码规范" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="IDEA" scheme="http://yoursite.com/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>CompletableFuture的实际应用</title>
    <link href="http://yoursite.com/2020/01/13/CompletableFuture%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2020/01/13/CompletableFuture%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</id>
    <published>2020-01-13T03:30:08.000Z</published>
    <updated>2020-01-13T08:29:52.782Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 当某个接口调用时长较长，接口中一系列微服务接口的调用，这时可以整理出一个耗时较长的接口，让其异步调用，在最后进行阻塞主线程进行获取结果。这个耗时较长的接口最先进行异步调用，再调用其他接口。如果其他接口的总耗时大于或等于这个耗时较长的接口，可以说减少了这个耗时较长的时间，优化了接口调用时长问题。可能说的有点绕，但是通过下图便可一目了然。  </p><a id="more"></a><p><img src="/2020/01/13/CompletableFuture%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/01.png" alt>  </p><p>&ensp; 由上图很清楚的可以知道，优化前在主线程中同步调用所有接口，由于method4接口耗时0.5，其他4个接口的总时长为0.5，如果走同步调用则总耗时为1。<br>&ensp; 对接口进行优化，让method4在主线程刚开始时，进行另开一个子线程异步调用，其他接口同步进行。在主线程中所有接口调用完毕之后，也就是在method5之后，阻塞主线程，去获取子线程中method4接口的结果，这样就优化了接口耗时。当然这只是理想中的，实际上，可能其它接口对method4返回的结果存在依赖，这样子就需要把依赖method4的接口放在阻塞获取method4结果之后进行调用，所以具体情况具体分析。  </p><p>&ensp; 下面来看一个小demo，<a href="https://github.com/zdzhong/main_test" target="_blank" rel="noopener">代码地址</a>，首先是5个function，function1耗时100ms：  </p><p>function1耗时100ms：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void function1()&#123;</span><br><span class="line">        &#x2F;&#x2F; 模拟方法耗时100ms</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(100);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>function2耗时200ms：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void function2()&#123;</span><br><span class="line">        &#x2F;&#x2F; 模拟方法耗时200ms</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(200);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>function3耗时200ms：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void function3()&#123;</span><br><span class="line">        &#x2F;&#x2F; 模拟方法耗时200ms</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(200);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>function4耗时500ms，有返回结果：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private int function4()&#123;</span><br><span class="line">        &#x2F;&#x2F; 模拟方法耗时500ms</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(500);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return 4;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>function5耗时100ms，需要依赖function4返回的结果：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private int function5(int a)&#123;</span><br><span class="line">        &#x2F;&#x2F; 模拟方法耗时100ms</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(100);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return a + 5;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在没有使用CompletableFuture的代码:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void regularTest()&#123;</span><br><span class="line">        long startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">        function1();</span><br><span class="line">        function2();</span><br><span class="line">        function3();</span><br><span class="line">        int result &#x3D; function4();</span><br><span class="line">        result &#x3D; function5(result);</span><br><span class="line">        long endTime &#x3D; System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;运行结果：&quot; + result + &quot;,耗时：&quot; + (endTime - startTime));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个就纯粹的所有function耗时加起来，总耗时1104，运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行结果：9,耗时：1104</span><br></pre></td></tr></table></figure><p>在使用CompletableFuture的代码:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void completableFutureTest()&#123;</span><br><span class="line">    long startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">    &#x2F;&#x2F; 在进入主线程时首先异步调用function4</span><br><span class="line">    CompletableFuture&lt;Integer&gt; future &#x3D; CompletableFuture.supplyAsync(this::function4);</span><br><span class="line">    &#x2F;&#x2F; 其他接口同步进行</span><br><span class="line">    function1();</span><br><span class="line">    function2();</span><br><span class="line">    function3();</span><br><span class="line">    int result &#x3D; 0;</span><br><span class="line">    &#x2F;&#x2F; function5依赖function4返回的结果</span><br><span class="line">    try &#123;</span><br><span class="line">        result &#x3D; future.get();</span><br><span class="line">    &#125; catch (Exception e)&#123;</span><br><span class="line">        result &#x3D; 1;</span><br><span class="line">        logger.error(&quot;error!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    result &#x3D; function5(result);</span><br><span class="line">    long endTime &#x3D; System.currentTimeMillis();</span><br><span class="line">    System.out.println(&quot;运行结果：&quot; + result + &quot;,耗时：&quot; + (endTime - startTime));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于刚开始进入时就异步调用function4，然后同时和function1，function2，function3进行操作，function1，function2，function3的总耗时为500ms，function4的耗时为500ms，这样就相当于减少了function4的耗时。总体耗时653，运行结果：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行结果：9,耗时：653</span><br></pre></td></tr></table></figure><p><code>CompletableFuture.supplyAsync(Supplier&lt;U&gt; supplier)</code> 新建一个线程来运行Supplier对象(有返回值)，在需要用的地方可以使用CompletableFuture.get()进行获取。  </p><p><code>CompletableFuture.runAsync(Runnable runnable)</code> 新建一个线程来运行Runnable对象(无返回值)。<br>over.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 当某个接口调用时长较长，接口中一系列微服务接口的调用，这时可以整理出一个耗时较长的接口，让其异步调用，在最后进行阻塞主线程进行获取结果。这个耗时较长的接口最先进行异步调用，再调用其他接口。如果其他接口的总耗时大于或等于这个耗时较长的接口，可以说减少了这个耗时较长的时间，优化了接口调用时长问题。可能说的有点绕，但是通过下图便可一目了然。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="项目经验" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>TCP详解</title>
    <link href="http://yoursite.com/2020/01/10/TCP%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/01/10/TCP%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-01-10T03:28:17.000Z</published>
    <updated>2020-01-10T09:49:47.425Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，为用户进程提供可靠的全双工字节流。位于计算机网络五层体系结构（物理层、数据链路层、网络层、运输层、应用层）中的运输层。  </p><h3 id="TCP数据包的组成"><a href="#TCP数据包的组成" class="headerlink" title="TCP数据包的组成"></a>TCP数据包的组成</h3><p>&ensp; 首先看一下tcp报文的头部： </p><a id="more"></a>   <p><img src="/2020/01/10/TCP%E8%AF%A6%E8%A7%A3/tcp01.png" alt>  </p><p>&ensp; <strong>16位的源端口号与16位的目的端口号</strong><br>用于寻找发送端和目的端应用进程。当然这只能用来确认某个主机中的进程，但是无法确认是哪一个主机，这个艰巨的任务就交由网络层的ip协议。  </p><p>&ensp; <strong>32位的序号</strong><br>TCP会话的每一端都包含一个32位（bit）的序列号，该序列号被用来跟踪发送端发送的数据量。在刚建立的的时候该值为随机值（随机算法：ISN=M + F(localhost, localport, remotehost, remoteport)，M是一个计时器，这个计时器每隔4毫秒加1。F是一个Hash算法，根据源IP、目的IP、源端口、目的端口生成一个随机数值。要保证hash算法不能被外部轻易推算得出），以后再将每次成功转发过去的<strong>字节数</strong>累加到初始值上表示数据的位置。每一个包中都包含序列号，在接收端则通过确认号用来通知发送端数据成功接收。  </p><p>&ensp; <strong>32位的确认序号</strong><br>这个确认序号用来表示为当前端从建立连接开始到目前接收的数据位数+1。（表示下一次应该收到的数据位置，发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收）  </p><p>&ensp; <strong>4位的偏移量</strong><br>数据偏移量也叫首部长度，用于记录tcp数据报首部的长度，一般为20字节，实际值为首部长度除以4。  </p><p>&ensp; <strong>标志位</strong><br>标志位字段长为6，每一位从左到右分别为：URG、ACK、PSH、RST、SYN、FIN。当对应的值为1，表示有具体含义:<br>URG:紧急指针是否有效。为1，表示某一位需要被优先处理。<br>ACK:确认号是否有效，一般置为1。<br>PSH:提示接收端应用程序立即从TCP缓冲区把数据读走。<br>RST :对方要求重新建立连接，复位。<br>SYN:为1表示请求建立连接，并在其序列号的字段进行序列号的初始值设定。<br>FIN:希望断开连接。  </p><p>&ensp; <strong>16位的窗口大小</strong><br>接收缓冲区的大小，TCP不允许发送超过此处所示大小的数据。  </p><p>&ensp; <strong>16位的校验和</strong><br>发送端填充，CRC校验，接收校验不通过，则认为数据有问题。和UDP的区别是，UDP校验的是数据本身，TCP校验的不仅包含TCP首部，而且包含TCP数据部分。  </p><p>&ensp; <strong>16位的紧急指针</strong><br>只有在URG为1时有效，该字段为1表示本报文的段中的紧急数据的指针。  </p><h3 id="三次握手建立连接"><a href="#三次握手建立连接" class="headerlink" title="三次握手建立连接"></a>三次握手建立连接</h3><p>&ensp; 第一次握手，客户端会发送一个标志位SYN=1（表示请求建立连接），序列号（seq）=X（随机生成的初始化值）的数据包给服务端主机。  </p><p>&ensp; 第二次握手，服务端收到客户端的建立连接请求，会发送一个标志位SYN=1,ACK=1，序列号（seq）=Y，确认序列号（ack）=X+1的数据包给客户端。  </p><p>&ensp; 第三次握手，当客户端收到数据包之后，知道了之前序列号=X的数据包已经被服务端收到，但是此时，服务端还不知道客户端有没有收到自己的确认包，所以，客户端会再次发送一个数据包，用来通知服务端自己已经收到它的确认包了，所以这个包里面的标志位只有ACK=1，表示确认包，并且序列号=X+1，确认号=Y+1，为什么都是+1 ？因为这三个包是特殊的包，专门用来建立连接的，所以并没有真实的有效数据，如果有有效数据，则还需要加上接收到的数据长度。此包发送完毕，客户端和服务器进入ESTAB_LISHED(TCP连接成功)状态，完成三次握手，接下来就可以传输数据了。<br>&ensp; <strong>第三次握手的报文是可以携带有效数据的</strong>，下面是一张tcp建立连接-传输数据-关闭连接图<br><img src="/2020/01/10/TCP%E8%AF%A6%E8%A7%A3/tcp02.png" alt></p><p>&ensp; <strong>为什么时三次握手，两次不行吗？</strong><br>如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。  </p><p>&ensp; <strong>什么是半连接队列？</strong><br>服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD  状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个队列里，我们把这种队列称之为半连接队列。  </p><p>当然还有一个全连接队列，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。  </p><p>这里在补充一点关于SYN-ACK 重传次数的问题：</p><p>服务器发送完SYN-ACK包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传。如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。</p><p>注意，每次重传等待的时间不一定相同，一般会是指数增长，例如间隔时间为 1s，2s，4s，8s…  </p><p>&ensp; <strong>SYN攻击是什么？</strong><br>服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的，所以服务器容易受到SYN洪泛攻击。SYN攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断地发送SYN包，Server则回复确认包，并等待Client确认，由于源地址不存在，因此Server需要不断重发直至超时，这些伪造的SYN包将长时间占用未连接队列，导致正常的SYN请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。SYN 攻击是一种典型的 DoS/DDoS 攻击。  </p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p>建立一个连接需要三次握手，而终止一个连接要经过四次挥手，这由TCP的半关闭造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。  </p><p>&ensp; 第一次挥手，客户端发送一个 FIN 报文，报文中会指定一个序列号。即发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，等待服务端的确认。  </p><p>&ensp; 第二次挥手，服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了。即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），此时的TCP处于半关闭状态，客户端到服务端的连接释放。  </p><p>&ensp; 第三次挥手，如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），等待客户端的确认。  </p><p>&ensp; 第四次挥手，客户端收到FIN之后，一样发送一个ACK报文作为应答，且把服务端的序列号值 +1 作为自己ACK报文的序列号值，需要过一阵子以确保服务端收到自己的ACK报文之后才会关闭连接，服务端收到 ACK 报文之后，就处于关闭连接了。即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1）。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才关闭连接。  </p><p>&ensp; <strong>挥手为什么需要四次</strong><br>因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，“你发的FIN报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四次挥手。  </p><p>&ensp; <strong>四次挥手释放连接时，等待2MSL的意义?</strong><br>每个具体TCP实现必须选择一个报文段最大生存时间MSL(Maximum Segment Lifetime)。它是任何报文段被丢弃前在网络内的最长时间。我们知道这个时间是有限的，因为TCP报文段以IP数据报在网络内传输，而IP数据报则有限制其生存时间的TTL字段。<br>对一个具体实现所给定的MSL值，处理的原则是：当TCP执行一个主动关闭，并发回最后一个ACK，该连接必须在TIME_WAIT状态停留的时间为2倍的MSL。这样可让TCP再次发送最后的ACK以防这个ACK丢失(<strong>另一端超时并重发最后的FIN</strong>)。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，为用户进程提供可靠的全双工字节流。位于计算机网络五层体系结构（物理层、数据链路层、网络层、运输层、应用层）中的运输层。  &lt;/p&gt;
&lt;h3 id=&quot;TCP数据包的组成&quot;&gt;&lt;a href=&quot;#TCP数据包的组成&quot; class=&quot;headerlink&quot; title=&quot;TCP数据包的组成&quot;&gt;&lt;/a&gt;TCP数据包的组成&lt;/h3&gt;&lt;p&gt;&amp;ensp; 首先看一下tcp报文的头部： &lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="tcp" scheme="http://yoursite.com/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="http://yoursite.com/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://yoursite.com/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/</id>
    <published>2020-01-07T01:26:56.000Z</published>
    <updated>2020-01-09T07:53:44.470Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 一说到数据结构就头疼，可是面试官爱问呀！没办法，来吧！<br>记忆中的红黑树，由红黑节点组成的一颗树（二叉树？），没了，什么都不记得了！</p><p>&ensp; 首先红黑树是在平衡二叉排序树的基础上进修扩展的，所以需要掌握二叉排序树。  </p><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><p>&ensp; 二叉排序树是一颗二叉树，对于树的每个节点是这样定义的：<br><strong>1.若左子树不为空，则左子树的所有节点均小于根节点的值</strong><br><strong>2.若右子树部位空，则右子树的所有节点均大于根节点的值</strong><br><strong>3.左，右子树分别也是二叉排序树</strong>  </p><a id="more"></a><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>&ensp; 普通的二叉排序树存在极不平衡的情况，导致整棵树的深度非常深，使得二叉排序树的时间复杂度退化成O(n)。<br>&ensp; 平衡二叉树的定义：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。<br>&ensp; 解决这种情况的做法，在往一棵树中插入一个新的节点时，如果二叉树的左右高度超过1时，进行左旋、右旋、先右旋再左旋、先左旋再右旋。  </p><p><strong>右旋</strong><br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/right.png" alt="右旋">  </p><p><strong>左旋</strong><br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/left.png" alt="右旋">  </p><p><strong>先右旋再左旋</strong><br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/right_left.png" alt="先右旋再左旋">  </p><p><strong>先左旋再右旋</strong><br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/left_right.png" alt="先左旋再右旋">  </p><p>这里举例是结合了二叉排序树和平衡二叉树，接下来就轮到的红黑树。  </p><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p>&ensp; 红黑树的特性：<br><strong>1.每个节点要么是黑色，要么是红色。</strong><br><strong>2.根节点是黑色。</strong><br><strong>3.每个叶子节点（null）是黑色。</strong><br><strong>4.每个红色结点的两个子结点一定都是黑色。</strong><br><strong>5.任意一结点到每个叶子结点的路径都包含数量相同的黑结点。</strong><br>&ensp; 所有的叶子节点都为null。红黑树有这么多的特性，如果对某个红黑树进行插入或者删除，是如何达到这种平衡呢？那就是来自红黑树的自平衡，红黑树之所以很难，就是每次插入或者删除操作都会打破这种平衡。  </p><p><strong>插入</strong><br>&ensp; 每次插入操作之前都需要查找，需要插入的位置。对于查找算法，如下：<br><strong>1.从根结点开始查找</strong><br><strong>2.若根结点为空，那么插入结点作为根结点，结束</strong><br><strong>3.若根结点不为空，那么把根结点作为当前结点</strong><br><strong>4.若当前结点为null，返回当前结点的父结点，结束</strong><br><strong>5.若当前结点key等于查找key，那么该key所在结点就是插入结点，更新结点的值，结束</strong><br><strong>6.若当前结点key大于查找key，把当前结点的左子结点设置为当前结点，重复步骤4</strong><br><strong>7.若当前结点key小于查找key，把当前结点的右子结点设置为当前结点，重复步骤4</strong><br>所有的叶子节点都是null节点，所以一定能找到插入位置。<br>&ensp; 假设当前的节点为节点1，有如下的约定：<br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/appointment01.png" alt><br>&ensp; 假设插入一个元素，那么有个问题，这个节点的颜色是啥？假设为黑色，那么每次插入的时候，该节点所在的路径上的黑色总会多一个，就需要进行自平衡。如果每次插入节点的颜色为红色，这样就存在插入后就已经达到了黑色平衡。所以每次插入的节点颜色为红色。<br>&ensp; 每次插入的情况有如下几种，如图：<br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/insert01.png" alt><br>&ensp; 插入操作情况存在这么多种，但是都左右对称。  </p><p><strong>删除</strong><br>&ensp; 接下来轮到删除了，删除操作就是查找对应的key，将该key对应的节点进行移除，但删除节点的位子需要有人顶替，所以在替换时对于替换的节点颜色和删除节点的位置进行分析。值得注意的是，如果删除的节点无子节点，直接删除即可。如果有一个子节点，用子结点替换删除结点。若删除结点有两个子结点，用后继结点（大于删除结点的最小结点）替换删除结点，也就是删除节点的右子树种最左结点。那么可以拿前继结点（删除结点的左子树最左结点）替代吗？可以的。但习惯上大多都是拿后继结点来替代。<br>&ensp; 每次删除的情况有如下几种，如图：<br><img src="/2020/01/07/%E7%BA%A2%E9%BB%91%E6%A0%91/delete01.png" alt> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 一说到数据结构就头疼，可是面试官爱问呀！没办法，来吧！&lt;br&gt;记忆中的红黑树，由红黑节点组成的一颗树（二叉树？），没了，什么都不记得了！&lt;/p&gt;
&lt;p&gt;&amp;ensp; 首先红黑树是在平衡二叉排序树的基础上进修扩展的，所以需要掌握二叉排序树。  &lt;/p&gt;
&lt;h3 id=&quot;二叉排序树&quot;&gt;&lt;a href=&quot;#二叉排序树&quot; class=&quot;headerlink&quot; title=&quot;二叉排序树&quot;&gt;&lt;/a&gt;二叉排序树&lt;/h3&gt;&lt;p&gt;&amp;ensp; 二叉排序树是一颗二叉树，对于树的每个节点是这样定义的：&lt;br&gt;&lt;strong&gt;1.若左子树不为空，则左子树的所有节点均小于根节点的值&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2.若右子树部位空，则右子树的所有节点均大于根节点的值&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;3.左，右子树分别也是二叉排序树&lt;/strong&gt;  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>每天几道java面试题-1</title>
    <link href="http://yoursite.com/2020/01/06/%E6%AF%8F%E5%A4%A9%E5%87%A0%E9%81%93java%E9%9D%A2%E8%AF%95%E9%A2%98-1/"/>
    <id>http://yoursite.com/2020/01/06/%E6%AF%8F%E5%A4%A9%E5%87%A0%E9%81%93java%E9%9D%A2%E8%AF%95%E9%A2%98-1/</id>
    <published>2020-01-06T09:46:53.000Z</published>
    <updated>2020-01-07T09:19:36.889Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 所有的java面试题来源知乎的一篇<a href="https://zhuanlan.zhihu.com/p/86536581" target="_blank" rel="noopener">面试清单（Java岗）</a>，从2020年1月6号开始，以每天一篇java文章进步，想到啥写啥！  </p><h1 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h1><h2 id="1-Hashmap-源码及掌握"><a href="#1-Hashmap-源码及掌握" class="headerlink" title="1.Hashmap 源码及掌握"></a>1.Hashmap 源码及掌握</h2><p>&ensp; <code>Hashmap</code>涉及的知识点较多，第一道题难道想要将我要进步的心扼杀在萌芽之中？<br>诶！万事开头难，慢慢啃吧！</p><a id="more"></a><p>&ensp; 印象中的<code>Hashmap</code>非线程安全，集合中的个数小于8时，使用的是数组加链表数据结构，用链表解决hash冲突，java8之后，冲突次数在大于8时，会转化为红黑树（好像当个数小于6个时，由红黑树转为链表）。  </p><p>&ensp; 其中扩容是有一个负载因子控制，默认为0.75，当<code>集合中的个数 &gt; 容量 * 负载因子</code> 时，会进行扩容，扩容之后的容量是之前的2倍。  </p><p>&ensp; 哈希算法忘记了，哈希冲突好像是如果通过哈希算法得到的该节点上有元素时，放在该节点的下个节点，如果也有元素时，继续下一个。</p><p>由此引出的知识点：1.什么时红黑树 2.为什么是红黑树，别的树不可以吗？ 3.为什么8的时候树化，4不可以吗？  </p><p>通过源码验证上面描述是否准确，以及分析问题。  </p><h3 id="1-1-Hashmap的属性"><a href="#1-1-Hashmap的属性" class="headerlink" title="1.1 Hashmap的属性"></a>1.1 Hashmap的属性</h3><pre><code>static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;     # 默认容量大小16（这个竟然忘记了）  static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;            # 最大容量2的30次方  static final float DEFAULT_LOAD_FACTOR = 0.75f;         # 默认的负载因子  static final int TREEIFY_THRESHOLD = 8;  # 转换为红黑树的门槛  static final int UNTREEIFY_THRESHOLD = 6;  # 由红黑树转换为链表的门槛  static final int MIN_TREEIFY_CAPACITY = 64;# 在转变成树之前，还会有一次判断，只有键值对数量大于 64 才会发生转换。（竟然还有这个判断）  # 这是为了避免在哈希表建立初期，多个键值对恰好被放入了同一个链表中而导致不必要的转化。  # 且该值不能小于4 * TREEIFY_THRESHOLD  </code></pre><h3 id="1-2-Hashmap的主要方法"><a href="#1-2-Hashmap的主要方法" class="headerlink" title="1.2 Hashmap的主要方法"></a>1.2 Hashmap的主要方法</h3><p>来了，来了，他来了，他带着hash算法来了。</p><pre><code>static final int hash(Object key) {        int h;        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);    }</code></pre><p>刚刚百度了一下Java中<code>^</code>运算符，这是一个异或运算（我是个菜鸡）<br>不用说这个<code>&gt;&gt;&gt;</code>我也不会，是时候总结一下了</p><pre><code>&gt;&gt;右移运算符，num &gt;&gt; 1,相当于num除以2。 按二进制形式把所有的数字向右移动对应位数，低位移出（舍弃），高位的空位补符号位，即正数补零，负数补1。符号位不变。所以-1 &gt;&gt; 2，还是等于-1，无论右移多少位都为-1  &gt;&gt;&gt; 二进制右移补零操作符，左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充-1 &gt;&gt;&gt; 2，1073741823</code></pre><p>这就有一个问题-1 &gt;&gt; 2，无论右移多少位都是-1，那么左移呢？通过测试得，左移无论是正数还是负数都是低位补0，-1 &lt;&lt; 1，-2。  </p><p>回归正题，hash算法，通过获取key的hashCode，再和key的hashCode无符号右移16位进行异或。<br>百度了一下其中的奥秘，现在还看不懂，先mark一下<a href="https://www.cnblogs.com/zxporz/p/11204233.html" target="_blank" rel="noopener">HashMap中的hash算法中的几个疑问</a>  </p><p>轮到了put方法：</p><pre><code>public V put(K key, V value) {        return putVal(hash(key), key, value, false, true);    }final V putVal(int hash, K key, V value, boolean onlyIfAbsent,                   boolean evict) {        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;        if ((tab = table) == null || (n = tab.length) == 0)            n = (tab = resize()).length;        if ((p = tab[i = (n - 1) &amp; hash]) == null)            tab[i] = newNode(hash, key, value, null);        else {            Node&lt;K,V&gt; e; K k;            if (p.hash == hash &amp;&amp;                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))                e = p;            else if (p instanceof TreeNode)                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);            else {                for (int binCount = 0; ; ++binCount) {                    if ((e = p.next) == null) {                        p.next = newNode(hash, key, value, null);                        if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st                            treeifyBin(tab, hash);                        break;                    }                    if (e.hash == hash &amp;&amp;                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))                        break;                    p = e;                }            }            if (e != null) { // existing mapping for key                V oldValue = e.value;                if (!onlyIfAbsent || oldValue == null)                    e.value = value;                afterNodeAccess(e);                return oldValue;            }        }        ++modCount;        if (++size &gt; threshold)            resize();        afterNodeInsertion(evict);        return null;    }</code></pre><p>哇，一个put方法就这么多（要不放弃吧！），慢慢来吧！<br>首先put方法中调用的putVal这个方法。<br>putVal方法中，先把<code>table</code>赋值给tab，<code>tab.length</code>赋值给n，如果<code>table</code>为null或者<code>tab.length</code>等于0，则进行扩容。<br>调用resize方法，扩容方法等下分析。继续，resize之后获得一个新的<code>Node</code>数组，判断i = (n - 1) &amp; hash数组索引为i处的Node是否有值，<br>如果没有值，则将键值对放在tab[i]处。<br>如果此处有值，则判断key是否存在<code>table</code>中，如果存在，则替换之前的值，如果不存在，则这个节点的拿下一个节点继续做判断。<br>其中有两点，第一点，如果当前节点的为红黑树数据结构，则新加入的节点会转为红黑树数据结构。<br>第二点，如果冲突的节点数已经达到8个，看是否需要改变冲突节点的存储结构，首先判断当前hashMap的容量，<br>如果不足64，只进行resize，扩容table，如果达到64，那么将冲突的存储结构为红黑树。  </p><pre><code>final Node&lt;K,V&gt;[] resize() {        Node&lt;K,V&gt;[] oldTab = table;        int oldCap = (oldTab == null) ? 0 : oldTab.length;        int oldThr = threshold;        int newCap, newThr = 0;        if (oldCap &gt; 0) {            if (oldCap &gt;= MAXIMUM_CAPACITY) {                threshold = Integer.MAX_VALUE;                return oldTab;            }            else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)                newThr = oldThr &lt;&lt; 1; // double threshold        }        else if (oldThr &gt; 0) // initial capacity was placed in threshold            newCap = oldThr;        else {               // zero initial threshold signifies using defaults            newCap = DEFAULT_INITIAL_CAPACITY;            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);        }        if (newThr == 0) {            float ft = (float)newCap * loadFactor;            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?                      (int)ft : Integer.MAX_VALUE);        }        threshold = newThr;        @SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;})            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];        table = newTab;        if (oldTab != null) {            for (int j = 0; j &lt; oldCap; ++j) {                Node&lt;K,V&gt; e;                if ((e = oldTab[j]) != null) {                    oldTab[j] = null;                    if (e.next == null)                        newTab[e.hash &amp; (newCap - 1)] = e;                    else if (e instanceof TreeNode)                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);                    else { // preserve order                        Node&lt;K,V&gt; loHead = null, loTail = null;                        Node&lt;K,V&gt; hiHead = null, hiTail = null;                        Node&lt;K,V&gt; next;                        do {                            next = e.next;                            if ((e.hash &amp; oldCap) == 0) {                                if (loTail == null)                                    loHead = e;                                else                                    loTail.next = e;                                loTail = e;                            }                            else {                                if (hiTail == null)                                    hiHead = e;                                else                                    hiTail.next = e;                                hiTail = e;                            }                        } while ((e = next) != null);                        if (loTail != null) {                            loTail.next = null;                            newTab[j] = loHead;                        }                        if (hiTail != null) {                            hiTail.next = null;                            newTab[j + oldCap] = hiHead;                        }                    }                }            }        }        return newTab;    }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 所有的java面试题来源知乎的一篇&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86536581&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面试清单（Java岗）&lt;/a&gt;，从2020年1月6号开始，以每天一篇java文章进步，想到啥写啥！  &lt;/p&gt;
&lt;h1 id=&quot;Java-基础&quot;&gt;&lt;a href=&quot;#Java-基础&quot; class=&quot;headerlink&quot; title=&quot;Java 基础&quot;&gt;&lt;/a&gt;Java 基础&lt;/h1&gt;&lt;h2 id=&quot;1-Hashmap-源码及掌握&quot;&gt;&lt;a href=&quot;#1-Hashmap-源码及掌握&quot; class=&quot;headerlink&quot; title=&quot;1.Hashmap 源码及掌握&quot;&gt;&lt;/a&gt;1.Hashmap 源码及掌握&lt;/h2&gt;&lt;p&gt;&amp;ensp; &lt;code&gt;Hashmap&lt;/code&gt;涉及的知识点较多，第一道题难道想要将我要进步的心扼杀在萌芽之中？&lt;br&gt;诶！万事开头难，慢慢啃吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="java面试题" scheme="http://yoursite.com/categories/java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>整车任务</title>
    <link href="http://yoursite.com/2019/12/16/%E6%95%B4%E8%BD%A6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/12/16/%E6%95%B4%E8%BD%A6%E4%BB%BB%E5%8A%A1/</id>
    <published>2019-12-16T02:29:26.000Z</published>
    <updated>2020-01-14T06:57:18.051Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 整车任务优化，巴枪端取派任务界面有一个下拉刷新功能，在取货任务下拉刷新时会去调用整车任务接口，获取该司机的整车任务，但是每个司机不一定有整车任务，<br>所以每次调用返回的都为null。  </p><h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><p>&ensp; 更改获取获取整车任务的方式，通过主动调用接口，切换为当司机有整车任务的时候，通过对方发送消息给我们。通过回调我们接口，将其存入Redis，每次只需要查一遍Redis，减少接口调用，优化接口性能。  </p><a id="more"></a>    <h2 id="Redis数据结构"><a href="#Redis数据结构" class="headerlink" title="Redis数据结构"></a>Redis数据结构</h2><p>&ensp; 一个司机有多个整车任务，司机做完一个任务，可以结束当前的整车任务，需要将其移除，下次下拉刷新查询不能有这个任务。key都用司机工号，value有3种数据类型可以考虑，string，list，hash。<br>1.将司机的所有整车任务序列化为json串，作为string类型存入；<br>2.将司机的所有整车任务存入list，作为list类型存入；<br>3.将司机的所有整车任务通过hash类型存入。<br>但是有一点需要注意，如果司机完成了一个任务，需要将其删除，如果用string类型，需要将其查出，反序列化成对象，删除某个任务，再序列化成json串，再次存入。这样操作繁琐，弃用。<br>如果采用list则减少序列化与反序列的操作，也需要查出，再remove某个任务，再存入。这种类型可行，做为备用。<br>最好的方式是采用hash存储，当需要移除某个任务是，直接remove对应的hash key即可。  </p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>&ensp; 使用Spring封装的<code>HashOperations&lt;H, HK, HV&gt;</code>类，操作简单</p><pre><code>RedisTemplate&lt;String, Object&gt; cacheTemplate = SpringUtils.getBean(&quot;redisTemplate&quot;, RedisTemplate.class);  HashOperations&lt;String, String, Object&gt; hashOperations = cacheTemplate.opsForHash   </code></pre><p>首先先获得一个RedisTemplate，再用opsForHash将其转为HashOperations类型。<br>HashOperations中的方法，主要用到的四个方法：<br>put(H key, HK hashKey, HV value)<br>get(H key, Object hashKey)<br>delete(H key, Object… hashKeys)<br>values(H key)  </p><pre><code>hashOperations.put(employeeNumber, taskId, Object)   # cache key：工号, hash key：整车任务id, Object：具体内容。  hashOperations.values(employeeNumber)                # 查询该司机所有的整车任务。  hashOperations.get(employeeNumber, taskId)           # 查询该司机某个整车任务的任务详情。hashOperations.delete(employeeNumber, taskId)        # 删除该司机的某个任务。</code></pre><p>over.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 整车任务优化，巴枪端取派任务界面有一个下拉刷新功能，在取货任务下拉刷新时会去调用整车任务接口，获取该司机的整车任务，但是每个司机不一定有整车任务，&lt;br&gt;所以每次调用返回的都为null。  &lt;/p&gt;
&lt;h2 id=&quot;优化方案&quot;&gt;&lt;a href=&quot;#优化方案&quot; class=&quot;headerlink&quot; title=&quot;优化方案&quot;&gt;&lt;/a&gt;优化方案&lt;/h2&gt;&lt;p&gt;&amp;ensp; 更改获取获取整车任务的方式，通过主动调用接口，切换为当司机有整车任务的时候，通过对方发送消息给我们。通过回调我们接口，将其存入Redis，每次只需要查一遍Redis，减少接口调用，优化接口性能。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="项目经验" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo工具的使用</title>
    <link href="http://yoursite.com/2019/12/11/first/"/>
    <id>http://yoursite.com/2019/12/11/first/</id>
    <published>2019-12-11T06:28:38.000Z</published>
    <updated>2020-01-07T01:42:00.197Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp; 一直想搭建一个属于自己的博客，终于被我捣鼓出来了。现在虽然没有文章，但是时间还长，慢慢积累吧！  </p><h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean        &#x2F;&#x2F;清除静态页面缓存（清除 public 文件夹)         </span><br><span class="line">$ hexo g            &#x2F;&#x2F;在本地生成静态页面（生成 public 文件夹）        </span><br><span class="line">$ hexo s            &#x2F;&#x2F;启动本地服务 http:&#x2F;&#x2F;localhost:4000，进行预览调试           </span><br><span class="line">$ hexo d            &#x2F;&#x2F;远程部署，同步到 GitHub</span><br></pre></td></tr></table></figure><p>&ensp; hexo g 是 hexo generate的简写，由此可知hexo s -&gt; hexo server，hexo d -&gt; hexo deploy  </p><a id="more"></a>    <h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>&ensp; 在搭建好hexo后，自带的默认主题<code>landscape</code>。想要符合自己风格的主题可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题</a>下载<br>&ensp; 下载之后将主题放在<code>themes</code>下面，然后在<code>_config.yml</code>文件中进行修改，重新部署到服务器之后生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: ayer</span><br></pre></td></tr></table></figure><h2 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post name</span><br></pre></td></tr></table></figure><h2 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h2><pre><code>*这是斜体* 或 _这也是斜体_ **这是粗体*****这是加粗斜体***~~这是删除线~~</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp; 一直想搭建一个属于自己的博客，终于被我捣鼓出来了。现在虽然没有文章，但是时间还长，慢慢积累吧！  &lt;/p&gt;
&lt;h2 id=&quot;hexo常用命令&quot;&gt;&lt;a href=&quot;#hexo常用命令&quot; class=&quot;headerlink&quot; title=&quot;hexo常用命令&quot;&gt;&lt;/a&gt;hexo常用命令&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo clean        &amp;#x2F;&amp;#x2F;清除静态页面缓存（清除 public 文件夹)         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo g            &amp;#x2F;&amp;#x2F;在本地生成静态页面（生成 public 文件夹）        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo s            &amp;#x2F;&amp;#x2F;启动本地服务 http:&amp;#x2F;&amp;#x2F;localhost:4000，进行预览调试           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo d            &amp;#x2F;&amp;#x2F;远程部署，同步到 GitHub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;ensp; hexo g 是 hexo generate的简写，由此可知hexo s -&amp;gt; hexo server，hexo d -&amp;gt; hexo deploy  &lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
